
2.EXTI_BUTTON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  4 .ARM          00000000  08000548  08000548  00010550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000548  08000550  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000548  08000548  00010548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800054c  0800054c  0001054c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000550  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000550  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010550  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d8a  00000000  00000000  00010579  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000041a  00000000  00000000  00011303  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d8  00000000  00000000  00011720  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000090  00000000  00000000  000117f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001018b  00000000  00000000  00011888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001413  00000000  00000000  00021a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054895  00000000  00000000  00022e26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000776bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001c0  00000000  00000000  00077738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000530 	.word	0x08000530

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000530 	.word	0x08000530

0800014c <main>:
#include "gpio.h"

//void EXTI0_IRQHandler();

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 8000150:	f000 f912 	bl	8000378 <rcc_HSE_config>
  gpio_config();
 8000154:	f000 f86e 	bl	8000234 <gpio_config>
  exti_config();
 8000158:	f000 f8c0 	bl	80002dc <exti_config>

  while(1){
 800015c:	e7fe      	b.n	800015c <main+0x10>

0800015e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800015e:	b480      	push	{r7}
 8000160:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000162:	bf00      	nop
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr
	...

0800016c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800016c:	b480      	push	{r7}
 800016e:	b083      	sub	sp, #12
 8000170:	af00      	add	r7, sp, #0
 8000172:	4603      	mov	r3, r0
 8000174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017a:	2b00      	cmp	r3, #0
 800017c:	db0b      	blt.n	8000196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	f003 021f 	and.w	r2, r3, #31
 8000184:	4906      	ldr	r1, [pc, #24]	; (80001a0 <__NVIC_EnableIRQ+0x34>)
 8000186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018a:	095b      	lsrs	r3, r3, #5
 800018c:	2001      	movs	r0, #1
 800018e:	fa00 f202 	lsl.w	r2, r0, r2
 8000192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000196:	bf00      	nop
 8000198:	370c      	adds	r7, #12
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	e000e100 	.word	0xe000e100

080001a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80001a4:	b480      	push	{r7}
 80001a6:	b083      	sub	sp, #12
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	db0c      	blt.n	80001d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f003 021f 	and.w	r2, r3, #31
 80001bc:	4907      	ldr	r1, [pc, #28]	; (80001dc <__NVIC_ClearPendingIRQ+0x38>)
 80001be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c2:	095b      	lsrs	r3, r3, #5
 80001c4:	2001      	movs	r0, #1
 80001c6:	fa00 f202 	lsl.w	r2, r0, r2
 80001ca:	3360      	adds	r3, #96	; 0x60
 80001cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001d0:	bf00      	nop
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr
 80001da:	bf00      	nop
 80001dc:	e000e100 	.word	0xe000e100

080001e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	4603      	mov	r3, r0
 80001e8:	6039      	str	r1, [r7, #0]
 80001ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	db0a      	blt.n	800020a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	490c      	ldr	r1, [pc, #48]	; (800022c <__NVIC_SetPriority+0x4c>)
 80001fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fe:	0112      	lsls	r2, r2, #4
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	440b      	add	r3, r1
 8000204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000208:	e00a      	b.n	8000220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	b2da      	uxtb	r2, r3
 800020e:	4908      	ldr	r1, [pc, #32]	; (8000230 <__NVIC_SetPriority+0x50>)
 8000210:	79fb      	ldrb	r3, [r7, #7]
 8000212:	f003 030f 	and.w	r3, r3, #15
 8000216:	3b04      	subs	r3, #4
 8000218:	0112      	lsls	r2, r2, #4
 800021a:	b2d2      	uxtb	r2, r2
 800021c:	440b      	add	r3, r1
 800021e:	761a      	strb	r2, [r3, #24]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000e100 	.word	0xe000e100
 8000230:	e000ed00 	.word	0xe000ed00

08000234 <gpio_config>:
 *      Author: Quang Huy
 */

#include "gpio.h"

void gpio_config(){
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* GPIOC 13 OUTPUT */
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN); //clear
 8000238:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <gpio_config+0x9c>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a24      	ldr	r2, [pc, #144]	; (80002d0 <gpio_config+0x9c>)
 800023e:	f023 0310 	bic.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 4;   // set 1
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <gpio_config+0x9c>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <gpio_config+0x9c>)
 800024a:	f043 0310 	orr.w	r3, r3, #16
 800024e:	6193      	str	r3, [r2, #24]
  GPIOC->CRH &= ~(3UL << 20); //PC13
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <gpio_config+0xa0>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <gpio_config+0xa0>)
 8000256:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800025a:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (1UL << 21);  // 10: Output mode, max speed 2 MHz.
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <gpio_config+0xa0>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <gpio_config+0xa0>)
 8000262:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000266:	6053      	str	r3, [r2, #4]
  GPIOC->CRH &= ~(3UL << 22); //00: General purpose output push-pull
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <gpio_config+0xa0>)
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <gpio_config+0xa0>)
 800026e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000272:	6053      	str	r3, [r2, #4]
  GPIOC->BSRR |= (1UL << 29); //set status init
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <gpio_config+0xa0>)
 8000276:	691b      	ldr	r3, [r3, #16]
 8000278:	4a16      	ldr	r2, [pc, #88]	; (80002d4 <gpio_config+0xa0>)
 800027a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800027e:	6113      	str	r3, [r2, #16]

  /* GPIOA 0 INPUT */
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPAEN);
 8000280:	4b13      	ldr	r3, [pc, #76]	; (80002d0 <gpio_config+0x9c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a12      	ldr	r2, [pc, #72]	; (80002d0 <gpio_config+0x9c>)
 8000286:	f023 0304 	bic.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 2;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <gpio_config+0x9c>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a0f      	ldr	r2, [pc, #60]	; (80002d0 <gpio_config+0x9c>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6193      	str	r3, [r2, #24]
  GPIOA->CRL &= ~(3UL << 0);    //PA0 00 INPUT
 8000298:	4b0f      	ldr	r3, [pc, #60]	; (80002d8 <gpio_config+0xa4>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <gpio_config+0xa4>)
 800029e:	f023 0303 	bic.w	r3, r3, #3
 80002a2:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 2);    // clear
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <gpio_config+0xa4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0b      	ldr	r2, [pc, #44]	; (80002d8 <gpio_config+0xa4>)
 80002aa:	f023 030c 	bic.w	r3, r3, #12
 80002ae:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (1UL << 2);
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <gpio_config+0xa4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a08      	ldr	r2, [pc, #32]	; (80002d8 <gpio_config+0xa4>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6013      	str	r3, [r2, #0]
  GPIOA->ODR |= GPIO_IDR_IDR0;  //PA0 INPUT
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <gpio_config+0xa4>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	4a05      	ldr	r2, [pc, #20]	; (80002d8 <gpio_config+0xa4>)
 80002c2:	f043 0301 	orr.w	r3, r3, #1
 80002c6:	60d3      	str	r3, [r2, #12]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40011000 	.word	0x40011000
 80002d8:	40010800 	.word	0x40010800

080002dc <exti_config>:
void exti_config(){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* AFIO FOR EXTI LINE 0 IN PA0*/
  RCC->APB2ENR &= ~(RCC_APB2ENR_AFIOEN);
 80002e0:	4b16      	ldr	r3, [pc, #88]	; (800033c <exti_config+0x60>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a15      	ldr	r2, [pc, #84]	; (800033c <exti_config+0x60>)
 80002e6:	f023 0301 	bic.w	r3, r3, #1
 80002ea:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= (1UL << 0);
 80002ec:	4b13      	ldr	r3, [pc, #76]	; (800033c <exti_config+0x60>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a12      	ldr	r2, [pc, #72]	; (800033c <exti_config+0x60>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6193      	str	r3, [r2, #24]
  AFIO->EXTICR[0] &=~ (0xFUL << 0);
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <exti_config+0x64>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a10      	ldr	r2, [pc, #64]	; (8000340 <exti_config+0x64>)
 80002fe:	f023 030f 	bic.w	r3, r3, #15
 8000302:	6093      	str	r3, [r2, #8]
  EXTI->IMR |= (1UL << 0);
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <exti_config+0x68>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <exti_config+0x68>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]
  EXTI->RTSR &=~ (1UL << 0);
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <exti_config+0x68>)
 8000312:	689b      	ldr	r3, [r3, #8]
 8000314:	4a0b      	ldr	r2, [pc, #44]	; (8000344 <exti_config+0x68>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6093      	str	r3, [r2, #8]
  EXTI->FTSR |= (1UL << 0);
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <exti_config+0x68>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a08      	ldr	r2, [pc, #32]	; (8000344 <exti_config+0x68>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	60d3      	str	r3, [r2, #12]

  NVIC_SetPriority(EXTI0_IRQn, 5);
 8000328:	2105      	movs	r1, #5
 800032a:	2006      	movs	r0, #6
 800032c:	f7ff ff58 	bl	80001e0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000330:	2006      	movs	r0, #6
 8000332:	f7ff ff1b 	bl	800016c <__NVIC_EnableIRQ>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40010000 	.word	0x40010000
 8000344:	40010400 	.word	0x40010400

08000348 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0

  NVIC_ClearPendingIRQ(EXTI0_IRQn);
 800034c:	2006      	movs	r0, #6
 800034e:	f7ff ff29 	bl	80001a4 <__NVIC_ClearPendingIRQ>
  EXTI->PR |= (1UL << 0); //CLEAR AFTER USE
 8000352:	4b07      	ldr	r3, [pc, #28]	; (8000370 <EXTI0_IRQHandler+0x28>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	4a06      	ldr	r2, [pc, #24]	; (8000370 <EXTI0_IRQHandler+0x28>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6153      	str	r3, [r2, #20]
//  EXTI->IMR &=~ (1UL << 0);
  GPIOC->ODR ^= (1UL << 13);
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <EXTI0_IRQHandler+0x2c>)
 8000360:	68db      	ldr	r3, [r3, #12]
 8000362:	4a04      	ldr	r2, [pc, #16]	; (8000374 <EXTI0_IRQHandler+0x2c>)
 8000364:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000368:	60d3      	str	r3, [r2, #12]
//  EXTI->IMR |= (1UL << 0);
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010400 	.word	0x40010400
 8000374:	40011000 	.word	0x40011000

08000378 <rcc_HSE_config>:
#include "rcc.h"

void rcc_HSE_config(){
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* PLLMUX = 9*/
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 800037c:	4b45      	ldr	r3, [pc, #276]	; (8000494 <rcc_HSE_config+0x11c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a44      	ldr	r2, [pc, #272]	; (8000494 <rcc_HSE_config+0x11c>)
 8000382:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000386:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 8000388:	4b42      	ldr	r3, [pc, #264]	; (8000494 <rcc_HSE_config+0x11c>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a41      	ldr	r2, [pc, #260]	; (8000494 <rcc_HSE_config+0x11c>)
 800038e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000392:	6053      	str	r3, [r2, #4]

  //USB prescalar
  RCC->CFGR &= ~(RCC_CFGR_USBPRE); // ~(1UL << 22) clear bit
 8000394:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <rcc_HSE_config+0x11c>)
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <rcc_HSE_config+0x11c>)
 800039a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800039e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 22);
 80003a0:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <rcc_HSE_config+0x11c>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	4a3b      	ldr	r2, [pc, #236]	; (8000494 <rcc_HSE_config+0x11c>)
 80003a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003aa:	6053      	str	r3, [r2, #4]

  //HSE config
  RCC->CR |= (1UL << 16);
 80003ac:	4b39      	ldr	r3, [pc, #228]	; (8000494 <rcc_HSE_config+0x11c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4a38      	ldr	r2, [pc, #224]	; (8000494 <rcc_HSE_config+0x11c>)
 80003b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003b6:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_HSERDY) == 0);
 80003b8:	bf00      	nop
 80003ba:	4b36      	ldr	r3, [pc, #216]	; (8000494 <rcc_HSE_config+0x11c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d0f9      	beq.n	80003ba <rcc_HSE_config+0x42>

  //HSE is PLL source
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 80003c6:	4b33      	ldr	r3, [pc, #204]	; (8000494 <rcc_HSE_config+0x11c>)
 80003c8:	685b      	ldr	r3, [r3, #4]
 80003ca:	4a32      	ldr	r2, [pc, #200]	; (8000494 <rcc_HSE_config+0x11c>)
 80003cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d0:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 16);
 80003d2:	4b30      	ldr	r3, [pc, #192]	; (8000494 <rcc_HSE_config+0x11c>)
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	4a2f      	ldr	r2, [pc, #188]	; (8000494 <rcc_HSE_config+0x11c>)
 80003d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003dc:	6053      	str	r3, [r2, #4]

  //PLL enable and wait
  RCC->CR |= (1UL << 24);
 80003de:	4b2d      	ldr	r3, [pc, #180]	; (8000494 <rcc_HSE_config+0x11c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a2c      	ldr	r2, [pc, #176]	; (8000494 <rcc_HSE_config+0x11c>)
 80003e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003e8:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 80003ea:	bf00      	nop
 80003ec:	4b29      	ldr	r3, [pc, #164]	; (8000494 <rcc_HSE_config+0x11c>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d0f9      	beq.n	80003ec <rcc_HSE_config+0x74>

  //Chọn tốc độ phù hợp hệ thống
  FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 80003f8:	4b27      	ldr	r3, [pc, #156]	; (8000498 <rcc_HSE_config+0x120>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a26      	ldr	r2, [pc, #152]	; (8000498 <rcc_HSE_config+0x120>)
 80003fe:	f023 0307 	bic.w	r3, r3, #7
 8000402:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (2UL << 0); //set
 8000404:	4b24      	ldr	r3, [pc, #144]	; (8000498 <rcc_HSE_config+0x120>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a23      	ldr	r2, [pc, #140]	; (8000498 <rcc_HSE_config+0x120>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6013      	str	r3, [r2, #0]
  //Prefetch buffer enable
  FLASH->ACR |= (1UL << 4); //set
 8000410:	4b21      	ldr	r3, [pc, #132]	; (8000498 <rcc_HSE_config+0x120>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a20      	ldr	r2, [pc, #128]	; (8000498 <rcc_HSE_config+0x120>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6013      	str	r3, [r2, #0]

  //select system clock switch
  RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 800041c:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <rcc_HSE_config+0x11c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a1c      	ldr	r2, [pc, #112]	; (8000494 <rcc_HSE_config+0x11c>)
 8000422:	f023 0303 	bic.w	r3, r3, #3
 8000426:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (2UL << 0); //set
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <rcc_HSE_config+0x11c>)
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	4a19      	ldr	r2, [pc, #100]	; (8000494 <rcc_HSE_config+0x11c>)
 800042e:	f043 0302 	orr.w	r3, r3, #2
 8000432:	6053      	str	r3, [r2, #4]
  while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 8000434:	bf00      	nop
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <rcc_HSE_config+0x11c>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	f003 0308 	and.w	r3, r3, #8
 800043e:	2b00      	cmp	r3, #0
 8000440:	d0f9      	beq.n	8000436 <rcc_HSE_config+0xbe>

  //Preipherals clock setup
  //AHB prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 8000442:	4b14      	ldr	r3, [pc, #80]	; (8000494 <rcc_HSE_config+0x11c>)
 8000444:	685b      	ldr	r3, [r3, #4]
 8000446:	4a13      	ldr	r2, [pc, #76]	; (8000494 <rcc_HSE_config+0x11c>)
 8000448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800044c:	6053      	str	r3, [r2, #4]
  //APB1 prescaler /2
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <rcc_HSE_config+0x11c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	4a10      	ldr	r2, [pc, #64]	; (8000494 <rcc_HSE_config+0x11c>)
 8000454:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000458:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <rcc_HSE_config+0x11c>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	4a0d      	ldr	r2, [pc, #52]	; (8000494 <rcc_HSE_config+0x11c>)
 8000460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000464:	6053      	str	r3, [r2, #4]
  //APB2 prescaler /1
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8000466:	4b0b      	ldr	r3, [pc, #44]	; (8000494 <rcc_HSE_config+0x11c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <rcc_HSE_config+0x11c>)
 800046c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000470:	6053      	str	r3, [r2, #4]
  //ADC prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <rcc_HSE_config+0x11c>)
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	4a07      	ldr	r2, [pc, #28]	; (8000494 <rcc_HSE_config+0x11c>)
 8000478:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800047c:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <rcc_HSE_config+0x11c>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <rcc_HSE_config+0x11c>)
 8000484:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000488:	6053      	str	r3, [r2, #4]

}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000
 8000498:	40022000 	.word	0x40022000

0800049c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800049c:	f7ff fe5f 	bl	800015e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004a2:	490c      	ldr	r1, [pc, #48]	; (80004d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a09      	ldr	r2, [pc, #36]	; (80004dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004b8:	4c09      	ldr	r4, [pc, #36]	; (80004e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004c6:	f000 f80f 	bl	80004e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff fe3f 	bl	800014c <main>
  bx lr
 80004ce:	4770      	bx	lr
  ldr r0, =_sdata
 80004d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004d8:	08000550 	.word	0x08000550
  ldr r2, =_sbss
 80004dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004e0:	2000001c 	.word	0x2000001c

080004e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e4:	e7fe      	b.n	80004e4 <ADC1_2_IRQHandler>
	...

080004e8 <__libc_init_array>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2500      	movs	r5, #0
 80004ec:	4e0c      	ldr	r6, [pc, #48]	; (8000520 <__libc_init_array+0x38>)
 80004ee:	4c0d      	ldr	r4, [pc, #52]	; (8000524 <__libc_init_array+0x3c>)
 80004f0:	1ba4      	subs	r4, r4, r6
 80004f2:	10a4      	asrs	r4, r4, #2
 80004f4:	42a5      	cmp	r5, r4
 80004f6:	d109      	bne.n	800050c <__libc_init_array+0x24>
 80004f8:	f000 f81a 	bl	8000530 <_init>
 80004fc:	2500      	movs	r5, #0
 80004fe:	4e0a      	ldr	r6, [pc, #40]	; (8000528 <__libc_init_array+0x40>)
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <__libc_init_array+0x44>)
 8000502:	1ba4      	subs	r4, r4, r6
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	42a5      	cmp	r5, r4
 8000508:	d105      	bne.n	8000516 <__libc_init_array+0x2e>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000510:	4798      	blx	r3
 8000512:	3501      	adds	r5, #1
 8000514:	e7ee      	b.n	80004f4 <__libc_init_array+0xc>
 8000516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800051a:	4798      	blx	r3
 800051c:	3501      	adds	r5, #1
 800051e:	e7f2      	b.n	8000506 <__libc_init_array+0x1e>
 8000520:	08000548 	.word	0x08000548
 8000524:	08000548 	.word	0x08000548
 8000528:	08000548 	.word	0x08000548
 800052c:	0800054c 	.word	0x0800054c

08000530 <_init>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

0800053c <_fini>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr
