
3.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b90  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000c9c  08000c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc0  08000cc8  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000cc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000cc8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012b8  00000000  00000000  00010cf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000068e  00000000  00000000  00011fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000150  00000000  00000000  00012638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000f8  00000000  00000000  00012788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001027a  00000000  00000000  00012880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001999  00000000  00000000  00022afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054a2d  00000000  00000000  00024493  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00078ec0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000430  00000000  00000000  00078f3c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000c84 	.word	0x08000c84

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000c84 	.word	0x08000c84

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <main>:
#include "gpio.h"
#include "uart.h"

bool button_status = false;
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 800064c:	f000 f936 	bl	80008bc <rcc_HSE_config>
  rcc_SysTick_config(72000); // T=1ms -> f=1/T=1KHz -> 72 000 000 / 72 000 = 1000
 8000650:	4828      	ldr	r0, [pc, #160]	; (80006f4 <main+0xac>)
 8000652:	f000 f9b9 	bl	80009c8 <rcc_SysTick_config>
  uart_UART2_config();
 8000656:	f000 fa79 	bl	8000b4c <uart_UART2_config>
  uart_UART2_GPIO_config();
 800065a:	f000 fa41 	bl	8000ae0 <uart_UART2_GPIO_config>
  gpioA_config();
 800065e:	f000 f8a5 	bl	80007ac <gpioA_config>
  gpioC_config();
 8000662:	f000 f855 	bl	8000710 <gpioC_config>

  while(1){
    if(gpioA_ReadPin(0) == 0 && button_status == 0){
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f8c8 	bl	80007fc <gpioA_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d11d      	bne.n	80006ae <main+0x66>
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0xb0>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	f083 0301 	eor.w	r3, r3, #1
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d016      	beq.n	80006ae <main+0x66>
      gpioC_WritePin(13, 1);
 8000680:	2101      	movs	r1, #1
 8000682:	200d      	movs	r0, #13
 8000684:	f000 f86c 	bl	8000760 <gpioC_WritePin>
      button_status = 1;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <main+0xb0>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
      uart_UART2_puts("button pressed\n");
 800068e:	481b      	ldr	r0, [pc, #108]	; (80006fc <main+0xb4>)
 8000690:	f000 fa10 	bl	8000ab4 <uart_UART2_puts>
      while(gpioA_ReadPin(0) == 0);
 8000694:	bf00      	nop
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f8b0 	bl	80007fc <gpioA_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f9      	beq.n	8000696 <main+0x4e>
      uart_UART2_puts("button unpressed\n");
 80006a2:	4817      	ldr	r0, [pc, #92]	; (8000700 <main+0xb8>)
 80006a4:	f000 fa06 	bl	8000ab4 <uart_UART2_puts>
      rcc_msDelay(20);
 80006a8:	2014      	movs	r0, #20
 80006aa:	f000 f9cf 	bl	8000a4c <rcc_msDelay>
    }
    if(gpioA_ReadPin(0) == 0 && button_status == 1){
 80006ae:	2000      	movs	r0, #0
 80006b0:	f000 f8a4 	bl	80007fc <gpioA_ReadPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1d5      	bne.n	8000666 <main+0x1e>
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0xb0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d0d1      	beq.n	8000666 <main+0x1e>
      gpioC_WritePin(13, 0);
 80006c2:	2100      	movs	r1, #0
 80006c4:	200d      	movs	r0, #13
 80006c6:	f000 f84b 	bl	8000760 <gpioC_WritePin>
      button_status = 0;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <main+0xb0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
      uart_UART2_puts("button pressed\n");
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <main+0xb4>)
 80006d2:	f000 f9ef 	bl	8000ab4 <uart_UART2_puts>
      while(gpioA_ReadPin(0) == 0);
 80006d6:	bf00      	nop
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 f88f 	bl	80007fc <gpioA_ReadPin>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d0f9      	beq.n	80006d8 <main+0x90>
      uart_UART2_puts("button unpressed\n");
 80006e4:	4806      	ldr	r0, [pc, #24]	; (8000700 <main+0xb8>)
 80006e6:	f000 f9e5 	bl	8000ab4 <uart_UART2_puts>
      rcc_msDelay(20);
 80006ea:	2014      	movs	r0, #20
 80006ec:	f000 f9ae 	bl	8000a4c <rcc_msDelay>
    if(gpioA_ReadPin(0) == 0 && button_status == 0){
 80006f0:	e7b9      	b.n	8000666 <main+0x1e>
 80006f2:	bf00      	nop
 80006f4:	00011940 	.word	0x00011940
 80006f8:	2000001c 	.word	0x2000001c
 80006fc:	08000c9c 	.word	0x08000c9c
 8000700:	08000cac 	.word	0x08000cac

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <gpioC_config>:
#include "gpio.h"

/*
 *    @brief PORT C
 */
void gpioC_config(){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* Enable port clock */
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN); //clear
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <gpioC_config+0x48>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <gpioC_config+0x48>)
 800071a:	f023 0310 	bic.w	r3, r3, #16
 800071e:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 4; // set 1
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <gpioC_config+0x48>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a0c      	ldr	r2, [pc, #48]	; (8000758 <gpioC_config+0x48>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6193      	str	r3, [r2, #24]

  /* Select Mode */
  GPIOC->CRH &= ~(3UL << 20); //PC13
 800072c:	4b0b      	ldr	r3, [pc, #44]	; (800075c <gpioC_config+0x4c>)
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <gpioC_config+0x4c>)
 8000732:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000736:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (2UL << 20); // 10: Output mode, max speed 2 MHz.
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <gpioC_config+0x4c>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <gpioC_config+0x4c>)
 800073e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000742:	6053      	str	r3, [r2, #4]

  /* Select CNF */ //pull up
  GPIOC->CRH &= ~(3UL << 22); //00: General purpose output push-pull
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <gpioC_config+0x4c>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <gpioC_config+0x4c>)
 800074a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800074e:	6053      	str	r3, [r2, #4]
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr
 8000758:	40021000 	.word	0x40021000
 800075c:	40011000 	.word	0x40011000

08000760 <gpioC_WritePin>:

void gpioC_WritePin(uint16_t pin, GPIO_PinState PinState){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	80fb      	strh	r3, [r7, #6]
 800076c:	4613      	mov	r3, r2
 800076e:	717b      	strb	r3, [r7, #5]
  if(PinState){
 8000770:	797b      	ldrb	r3, [r7, #5]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d009      	beq.n	800078a <gpioC_WritePin+0x2a>
    GPIOC->ODR |= (1UL << pin);
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <gpioC_WritePin+0x48>)
 8000778:	68da      	ldr	r2, [r3, #12]
 800077a:	88fb      	ldrh	r3, [r7, #6]
 800077c:	2101      	movs	r1, #1
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	4909      	ldr	r1, [pc, #36]	; (80007a8 <gpioC_WritePin+0x48>)
 8000784:	4313      	orrs	r3, r2
 8000786:	60cb      	str	r3, [r1, #12]
  }
  else{
    GPIOC->ODR &= ~(1UL << pin);
  }
}
 8000788:	e009      	b.n	800079e <gpioC_WritePin+0x3e>
    GPIOC->ODR &= ~(1UL << pin);
 800078a:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <gpioC_WritePin+0x48>)
 800078c:	68da      	ldr	r2, [r3, #12]
 800078e:	88fb      	ldrh	r3, [r7, #6]
 8000790:	2101      	movs	r1, #1
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	43db      	mvns	r3, r3
 8000798:	4903      	ldr	r1, [pc, #12]	; (80007a8 <gpioC_WritePin+0x48>)
 800079a:	4013      	ands	r3, r2
 800079c:	60cb      	str	r3, [r1, #12]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40011000 	.word	0x40011000

080007ac <gpioA_config>:

/*
 *    @brief PORT A
 */

void gpioA_config(){
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  //Enable port clock
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPAEN); //clear
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <gpioA_config+0x48>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a0f      	ldr	r2, [pc, #60]	; (80007f4 <gpioA_config+0x48>)
 80007b6:	f023 0304 	bic.w	r3, r3, #4
 80007ba:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 2; // set 1
 80007bc:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <gpioA_config+0x48>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a0c      	ldr	r2, [pc, #48]	; (80007f4 <gpioA_config+0x48>)
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	6193      	str	r3, [r2, #24]
  //select mode
  GPIOA->CRL &= ~(3UL << 0); //PA0 00 INPUT
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <gpioA_config+0x4c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0a      	ldr	r2, [pc, #40]	; (80007f8 <gpioA_config+0x4c>)
 80007ce:	f023 0303 	bic.w	r3, r3, #3
 80007d2:	6013      	str	r3, [r2, #0]
  //CNF floating
  GPIOA->CRL &= ~(3UL << 2); // clear
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <gpioA_config+0x4c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a07      	ldr	r2, [pc, #28]	; (80007f8 <gpioA_config+0x4c>)
 80007da:	f023 030c 	bic.w	r3, r3, #12
 80007de:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (1UL << 2);
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <gpioA_config+0x4c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a04      	ldr	r2, [pc, #16]	; (80007f8 <gpioA_config+0x4c>)
 80007e6:	f043 0304 	orr.w	r3, r3, #4
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40010800 	.word	0x40010800

080007fc <gpioA_ReadPin>:
    else{
      GPIOA->ODR &= ~(1UL << pin);
    }
}

GPIO_PinState gpioA_ReadPin(uint16_t pin){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
  return (bool)(GPIOA->IDR & (1UL << pin));
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <gpioA_ReadPin+0x2c>)
 8000808:	689a      	ldr	r2, [r3, #8]
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	fa22 f303 	lsr.w	r3, r2, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf14      	ite	ne
 8000818:	2301      	movne	r3, #1
 800081a:	2300      	moveq	r3, #0
 800081c:	b2db      	uxtb	r3, r3
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40010800 	.word	0x40010800

0800082c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083a:	2b00      	cmp	r3, #0
 800083c:	db0c      	blt.n	8000858 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	f003 021f 	and.w	r2, r3, #31
 8000844:	4907      	ldr	r1, [pc, #28]	; (8000864 <__NVIC_ClearPendingIRQ+0x38>)
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	095b      	lsrs	r3, r3, #5
 800084c:	2001      	movs	r0, #1
 800084e:	fa00 f202 	lsl.w	r2, r0, r2
 8000852:	3360      	adds	r3, #96	; 0x60
 8000854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000e100 	.word	0xe000e100

08000868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	6039      	str	r1, [r7, #0]
 8000872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000878:	2b00      	cmp	r3, #0
 800087a:	db0a      	blt.n	8000892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	b2da      	uxtb	r2, r3
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <__NVIC_SetPriority+0x4c>)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	0112      	lsls	r2, r2, #4
 8000888:	b2d2      	uxtb	r2, r2
 800088a:	440b      	add	r3, r1
 800088c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000890:	e00a      	b.n	80008a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4908      	ldr	r1, [pc, #32]	; (80008b8 <__NVIC_SetPriority+0x50>)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	f003 030f 	and.w	r3, r3, #15
 800089e:	3b04      	subs	r3, #4
 80008a0:	0112      	lsls	r2, r2, #4
 80008a2:	b2d2      	uxtb	r2, r2
 80008a4:	440b      	add	r3, r1
 80008a6:	761a      	strb	r2, [r3, #24]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <rcc_HSE_config>:
#include "rcc.h"


static __IO uint32_t msTicks = 0;

void rcc_HSE_config(void){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
    /*  HSE = 8 MHZ
     *  AHB prescaler = 1
     *  PLLMUX = 9
     *  --> 72 MHz System Clock
    */
    RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 80008c0:	4b3f      	ldr	r3, [pc, #252]	; (80009c0 <rcc_HSE_config+0x104>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	4a3e      	ldr	r2, [pc, #248]	; (80009c0 <rcc_HSE_config+0x104>)
 80008c6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80008ca:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 80008cc:	4b3c      	ldr	r3, [pc, #240]	; (80009c0 <rcc_HSE_config+0x104>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	4a3b      	ldr	r2, [pc, #236]	; (80009c0 <rcc_HSE_config+0x104>)
 80008d2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80008d6:	6053      	str	r3, [r2, #4]

    /* HSE configuration */
    RCC->CR |= (1UL << 16);
 80008d8:	4b39      	ldr	r3, [pc, #228]	; (80009c0 <rcc_HSE_config+0x104>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a38      	ldr	r2, [pc, #224]	; (80009c0 <rcc_HSE_config+0x104>)
 80008de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008e2:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_HSERDY) == 0);
 80008e4:	bf00      	nop
 80008e6:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <rcc_HSE_config+0x104>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <rcc_HSE_config+0x2a>

    /* HSE is PLL source */
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <rcc_HSE_config+0x104>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	4a32      	ldr	r2, [pc, #200]	; (80009c0 <rcc_HSE_config+0x104>)
 80008f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (1UL << 16);
 80008fe:	4b30      	ldr	r3, [pc, #192]	; (80009c0 <rcc_HSE_config+0x104>)
 8000900:	685b      	ldr	r3, [r3, #4]
 8000902:	4a2f      	ldr	r2, [pc, #188]	; (80009c0 <rcc_HSE_config+0x104>)
 8000904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000908:	6053      	str	r3, [r2, #4]

    /* PLL enable and wait */
    RCC->CR |= (1UL << 24);
 800090a:	4b2d      	ldr	r3, [pc, #180]	; (80009c0 <rcc_HSE_config+0x104>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2c      	ldr	r2, [pc, #176]	; (80009c0 <rcc_HSE_config+0x104>)
 8000910:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000914:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 8000916:	bf00      	nop
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <rcc_HSE_config+0x104>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f9      	beq.n	8000918 <rcc_HSE_config+0x5c>

    //Chọn tốc độ phù hợp hệ thống vì code sẽ nạp vào FLASH
    FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <rcc_HSE_config+0x108>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a26      	ldr	r2, [pc, #152]	; (80009c4 <rcc_HSE_config+0x108>)
 800092a:	f023 0307 	bic.w	r3, r3, #7
 800092e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (2UL << 0); //set
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <rcc_HSE_config+0x108>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a23      	ldr	r2, [pc, #140]	; (80009c4 <rcc_HSE_config+0x108>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6013      	str	r3, [r2, #0]
    //Prefetch buffer enable
    FLASH->ACR |= (1UL << 4); //set
 800093c:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <rcc_HSE_config+0x108>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a20      	ldr	r2, [pc, #128]	; (80009c4 <rcc_HSE_config+0x108>)
 8000942:	f043 0310 	orr.w	r3, r3, #16
 8000946:	6013      	str	r3, [r2, #0]

    /* select system clock switch */
    RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 8000948:	4b1d      	ldr	r3, [pc, #116]	; (80009c0 <rcc_HSE_config+0x104>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <rcc_HSE_config+0x104>)
 800094e:	f023 0303 	bic.w	r3, r3, #3
 8000952:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (2UL << 0); //set
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <rcc_HSE_config+0x104>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <rcc_HSE_config+0x104>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6053      	str	r3, [r2, #4]
    while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 8000960:	bf00      	nop
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <rcc_HSE_config+0x104>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0308 	and.w	r3, r3, #8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f9      	beq.n	8000962 <rcc_HSE_config+0xa6>

    /* Preipherals clock setup */
    //AHB prescaler
    RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <rcc_HSE_config+0x104>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a13      	ldr	r2, [pc, #76]	; (80009c0 <rcc_HSE_config+0x104>)
 8000974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000978:	6053      	str	r3, [r2, #4]
    //APB1 prescaler /2
    RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <rcc_HSE_config+0x104>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a10      	ldr	r2, [pc, #64]	; (80009c0 <rcc_HSE_config+0x104>)
 8000980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000984:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <rcc_HSE_config+0x104>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <rcc_HSE_config+0x104>)
 800098c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000990:	6053      	str	r3, [r2, #4]
    //APB2 prescaler /1
    RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <rcc_HSE_config+0x104>)
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <rcc_HSE_config+0x104>)
 8000998:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800099c:	6053      	str	r3, [r2, #4]
    //ADC prescaler
    RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <rcc_HSE_config+0x104>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <rcc_HSE_config+0x104>)
 80009a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009a8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <rcc_HSE_config+0x104>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <rcc_HSE_config+0x104>)
 80009b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009b4:	6053      	str	r3, [r2, #4]
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40022000 	.word	0x40022000

080009c8 <rcc_SysTick_config>:

void rcc_SysTick_config(uint32_t arr){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  //Reset Control register
  SysTick->CTRL = 0;
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
  //Set the Reload value
  SysTick->LOAD = arr;
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	6053      	str	r3, [r2, #4]
  //Set priority SysTick interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn, 0);
 80009dc:	2100      	movs	r1, #0
 80009de:	f04f 30ff 	mov.w	r0, #4294967295
 80009e2:	f7ff ff41 	bl	8000868 <__NVIC_SetPriority>
  //Reset Stick value to 0
  SysTick->VAL = 0;
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  //Enable SysTick from control register
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //Enable SysTick Exceptions
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <rcc_SysTick_config+0x50>)
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //Use CPU Clock
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <rcc_SysTick_config+0x50>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <rcc_SysTick_config+0x50>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6013      	str	r3, [r2, #0]
}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	e000e010 	.word	0xe000e010

08000a1c <rcc_msIncTicks>:

void rcc_msIncTicks(void){
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  msTicks++;
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <rcc_msIncTicks+0x18>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <rcc_msIncTicks+0x18>)
 8000a28:	6013      	str	r3, [r2, #0]
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	20000020 	.word	0x20000020

08000a38 <rcc_msGetTicks>:

uint32_t rcc_msGetTicks(void){
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return msTicks;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <rcc_msGetTicks+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	20000020 	.word	0x20000020

08000a4c <rcc_msDelay>:

void rcc_msDelay(uint32_t  ms){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t startTicks = rcc_msGetTicks();
 8000a54:	f7ff fff0 	bl	8000a38 <rcc_msGetTicks>
 8000a58:	60f8      	str	r0, [r7, #12]
  while((rcc_msGetTicks() - startTicks) < ms);
 8000a5a:	bf00      	nop
 8000a5c:	f7ff ffec 	bl	8000a38 <rcc_msGetTicks>
 8000a60:	4602      	mov	r2, r0
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	d8f7      	bhi.n	8000a5c <rcc_msDelay+0x10>
}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SysTick_Handler>:

void SysTick_Handler(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn); // Clear Flag
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff fed6 	bl	800082c <__NVIC_ClearPendingIRQ>
  rcc_msIncTicks();
 8000a80:	f7ff ffcc 	bl	8000a1c <rcc_msIncTicks>
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <uart_UART2_putc>:

#define Perpher_CLK 36000000
#define Baudrate  115200

void uart_UART2_putc(char ch)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  /*Make sure the transmit data register is empty*/
  while(!(USART2->SR & USART_SR_TXE)){}
 8000a92:	bf00      	nop
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <uart_UART2_putc+0x28>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d0f9      	beq.n	8000a94 <uart_UART2_putc+0xc>

  /*Write to transmit data register*/
  USART2->DR  =  (ch & 0xFF);
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <uart_UART2_putc+0x28>)
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	6053      	str	r3, [r2, #4]
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <uart_UART2_puts>:

void uart_UART2_puts(char *str){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  while(*str != '\0'){
 8000abc:	e007      	b.n	8000ace <uart_UART2_puts+0x1a>
    uart_UART2_putc(*str);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ffe0 	bl	8000a88 <uart_UART2_putc>
    str++;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3301      	adds	r3, #1
 8000acc:	607b      	str	r3, [r7, #4]
  while(*str != '\0'){
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f3      	bne.n	8000abe <uart_UART2_puts+0xa>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <uart_UART2_GPIO_config>:
    // Reverse the string
    while (i > 0) {
      uart_UART2_putc(buffer[--i]);
    }
}
void uart_UART2_GPIO_config(){
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
   *  A2 - TX2: output
   *  A3 - RX3: input
   */

  //Enable PORT_A clock
  RCC->APB2ENR |= (1UL << 2);
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <uart_UART2_GPIO_config+0x60>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <uart_UART2_GPIO_config+0x60>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6193      	str	r3, [r2, #24]
  //ENABLE CLOCK as alternate function
  RCC->APB2ENR |= (1UL << 0);
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <uart_UART2_GPIO_config+0x60>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <uart_UART2_GPIO_config+0x60>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6193      	str	r3, [r2, #24]

  /*
   *  @brief Config PA2 as output 50mhz
   *         and alternate output function push - pull
   */
  GPIOA->CRL &= ~(3UL << 8); //CLEAR MODE
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b06:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (3UL << 8); //SET MODE 11
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b0e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000b12:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 10); //CLEAR CNF
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b1a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000b1e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (2UL << 10); //SET CNF OUTPUT AS AF
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <uart_UART2_GPIO_config+0x64>)
 8000b26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2a:	6013      	str	r3, [r2, #0]

  /* DONT REMAP PA2 FOR USART2 */
  AFIO->MAPR &= ~(1UL << 3);
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <uart_UART2_GPIO_config+0x68>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <uart_UART2_GPIO_config+0x68>)
 8000b32:	f023 0308 	bic.w	r3, r3, #8
 8000b36:	6053      	str	r3, [r2, #4]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010000 	.word	0x40010000

08000b4c <uart_UART2_config>:
/* USART1 configuration*/
void uart_UART2_config(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
  //ENABLE USART2 CLOCK
  RCC->APB1ENR |= 1UL << 17;
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <uart_UART2_config+0x98>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <uart_UART2_config+0x98>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	61d3      	str	r3, [r2, #28]

  //Transmit Enable
  USART2->CR1 |= USART_CR1_TE;
 8000b5e:	4b22      	ldr	r3, [pc, #136]	; (8000be8 <uart_UART2_config+0x9c>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	4a21      	ldr	r2, [pc, #132]	; (8000be8 <uart_UART2_config+0x9c>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	60d3      	str	r3, [r2, #12]

  //SETUP BAUDRATE
  float usart_div = 0;
 8000b6a:	f04f 0300 	mov.w	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  uint32_t div_Ma = 0, div_Fra = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  usart_div = Perpher_CLK / (16.0 * Baudrate);
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <uart_UART2_config+0xa0>)
 8000b7a:	60fb      	str	r3, [r7, #12]
  div_Ma = usart_div;
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f7ff fd43 	bl	8000608 <__aeabi_f2uiz>
 8000b82:	4603      	mov	r3, r0
 8000b84:	60bb      	str	r3, [r7, #8]
  div_Fra = (usart_div - div_Ma)*16;
 8000b86:	68b8      	ldr	r0, [r7, #8]
 8000b88:	f7ff fb96 	bl	80002b8 <__aeabi_ui2f>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fadf 	bl	8000154 <__aeabi_fsub>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fbe3 	bl	8000368 <__aeabi_fmul>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fd2f 	bl	8000608 <__aeabi_f2uiz>
 8000baa:	4603      	mov	r3, r0
 8000bac:	607b      	str	r3, [r7, #4]
  USART2->BRR = 0;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  USART2->BRR |= (div_Ma << 4);
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bb6:	689a      	ldr	r2, [r3, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	490a      	ldr	r1, [pc, #40]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	608b      	str	r3, [r1, #8]
  USART2->BRR |= (div_Fra << 0);
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	608b      	str	r3, [r1, #8]

  //OR CÓ THỂ SET BRR
//  USART2->BRR =  ((Perpher_CLK + (Baudrate/2U))/Baudrate);

  //ENABLE USART2
  USART2->CR1 |= USART_CR1_UE;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <uart_UART2_config+0x9c>)
 8000bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bd8:	60d3      	str	r3, [r2, #12]

}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40004400 	.word	0x40004400
 8000bec:	419c4000 	.word	0x419c4000

08000bf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf0:	f7ff fd88 	bl	8000704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bf6:	490c      	ldr	r1, [pc, #48]	; (8000c28 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bf8:	4a0c      	ldr	r2, [pc, #48]	; (8000c2c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bfc:	e002      	b.n	8000c04 <LoopCopyDataInit>

08000bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c02:	3304      	adds	r3, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c08:	d3f9      	bcc.n	8000bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0a:	4a09      	ldr	r2, [pc, #36]	; (8000c30 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c0c:	4c09      	ldr	r4, [pc, #36]	; (8000c34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c10:	e001      	b.n	8000c16 <LoopFillZerobss>

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c14:	3204      	adds	r2, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f000 f80f 	bl	8000c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c1e:	f7ff fd13 	bl	8000648 <main>
  bx lr
 8000c22:	4770      	bx	lr
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c2c:	08000cc8 	.word	0x08000cc8
  ldr r2, =_sbss
 8000c30:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c34:	20000024 	.word	0x20000024

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <__libc_init_array>:
 8000c3c:	b570      	push	{r4, r5, r6, lr}
 8000c3e:	2500      	movs	r5, #0
 8000c40:	4e0c      	ldr	r6, [pc, #48]	; (8000c74 <__libc_init_array+0x38>)
 8000c42:	4c0d      	ldr	r4, [pc, #52]	; (8000c78 <__libc_init_array+0x3c>)
 8000c44:	1ba4      	subs	r4, r4, r6
 8000c46:	10a4      	asrs	r4, r4, #2
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	d109      	bne.n	8000c60 <__libc_init_array+0x24>
 8000c4c:	f000 f81a 	bl	8000c84 <_init>
 8000c50:	2500      	movs	r5, #0
 8000c52:	4e0a      	ldr	r6, [pc, #40]	; (8000c7c <__libc_init_array+0x40>)
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <__libc_init_array+0x44>)
 8000c56:	1ba4      	subs	r4, r4, r6
 8000c58:	10a4      	asrs	r4, r4, #2
 8000c5a:	42a5      	cmp	r5, r4
 8000c5c:	d105      	bne.n	8000c6a <__libc_init_array+0x2e>
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c64:	4798      	blx	r3
 8000c66:	3501      	adds	r5, #1
 8000c68:	e7ee      	b.n	8000c48 <__libc_init_array+0xc>
 8000c6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6e:	4798      	blx	r3
 8000c70:	3501      	adds	r5, #1
 8000c72:	e7f2      	b.n	8000c5a <__libc_init_array+0x1e>
 8000c74:	08000cc0 	.word	0x08000cc0
 8000c78:	08000cc0 	.word	0x08000cc0
 8000c7c:	08000cc0 	.word	0x08000cc0
 8000c80:	08000cc4 	.word	0x08000cc4

08000c84 <_init>:
 8000c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c86:	bf00      	nop
 8000c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8a:	bc08      	pop	{r3}
 8000c8c:	469e      	mov	lr, r3
 8000c8e:	4770      	bx	lr

08000c90 <_fini>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr
