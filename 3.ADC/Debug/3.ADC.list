
3.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ea0  08000ea0  00010ea8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ea0  08000ea0  00010ea8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ea0  08000ea8  00010ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea0  08000ea0  00010ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ea4  08000ea4  00010ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  08000ea8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000ea8  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ea8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004659  00000000  00000000  00010ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ce5  00000000  00000000  0001552a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d0  00000000  00000000  00016210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000163e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011682  00000000  00000000  00016548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002af5  00000000  00000000  00027bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00058ee6  00000000  00000000  0002a6bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000835a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000600  00000000  00000000  00083620  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000e74 	.word	0x08000e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000e74 	.word	0x08000e74

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000208:	f1a2 0201 	sub.w	r2, r2, #1
 800020c:	d1ed      	bne.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000656:	2b00      	cmp	r3, #0
 8000658:	db0c      	blt.n	8000674 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	f003 021f 	and.w	r2, r3, #31
 8000660:	4907      	ldr	r1, [pc, #28]	; (8000680 <__NVIC_ClearPendingIRQ+0x38>)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	095b      	lsrs	r3, r3, #5
 8000668:	2001      	movs	r0, #1
 800066a:	fa00 f202 	lsl.w	r2, r0, r2
 800066e:	3360      	adds	r3, #96	; 0x60
 8000670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e100 	.word	0xe000e100

08000684 <main>:

bool adcEOC = false;
uint16_t value = 0;

int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 8000688:	f000 f9ca 	bl	8000a20 <rcc_HSE_config>
  rcc_SysTick_config(72000); // T=1ms -> f=1/T=1KHz -> 72 000 000 / 72 000 = 1000
 800068c:	481c      	ldr	r0, [pc, #112]	; (8000700 <main+0x7c>)
 800068e:	f000 fa4d 	bl	8000b2c <rcc_SysTick_config>

  uart_UART2_config();
 8000692:	f000 fb53 	bl	8000d3c <uart_UART2_config>
  uart_UART2_GPIO_config();
 8000696:	f000 fb1b 	bl	8000cd0 <uart_UART2_GPIO_config>

  adc_GPIO_config();
 800069a:	f000 f879 	bl	8000790 <adc_GPIO_config>
  adc_single_config(Potemtionmeter);
 800069e:	2005      	movs	r0, #5
 80006a0:	f000 f8aa 	bl	80007f8 <adc_single_config>

  gpioC_config();
 80006a4:	f000 f926 	bl	80008f4 <gpioC_config>

  adc_enableEOC();
 80006a8:	f000 f914 	bl	80008d4 <adc_enableEOC>
  adc_Start();
 80006ac:	f000 f8ee 	bl	800088c <adc_Start>
//      uart_UART2_puts("Failed\n");
//    }


    /* ADC Interrupt */
    if(adcEOC)
 80006b0:	4b14      	ldr	r3, [pc, #80]	; (8000704 <main+0x80>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00f      	beq.n	80006d8 <main+0x54>
    {
      adcEOC = false;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <main+0x80>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
      uart_UART2_puts("ADC value = ");
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0x84>)
 80006c0:	f000 faaa 	bl	8000c18 <uart_UART2_puts>
      uart2_write_integer((int)value);
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0x88>)
 80006c6:	881b      	ldrh	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fabb 	bl	8000c44 <uart2_write_integer>
      uart_UART2_puts("\n");
 80006ce:	4810      	ldr	r0, [pc, #64]	; (8000710 <main+0x8c>)
 80006d0:	f000 faa2 	bl	8000c18 <uart_UART2_puts>
      adc_Start();
 80006d4:	f000 f8da 	bl	800088c <adc_Start>
    }

    if(value > 2000)
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <main+0x88>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80006e0:	d904      	bls.n	80006ec <main+0x68>
      gpioC_WritePin(13, 1);
 80006e2:	2101      	movs	r1, #1
 80006e4:	200d      	movs	r0, #13
 80006e6:	f000 f92d 	bl	8000944 <gpioC_WritePin>
 80006ea:	e003      	b.n	80006f4 <main+0x70>
    else
      gpioC_WritePin(13, 0);
 80006ec:	2100      	movs	r1, #0
 80006ee:	200d      	movs	r0, #13
 80006f0:	f000 f928 	bl	8000944 <gpioC_WritePin>

    rcc_msDelay(500);
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f000 fa5a 	bl	8000bb0 <rcc_msDelay>
    if(adcEOC)
 80006fc:	e7d8      	b.n	80006b0 <main+0x2c>
 80006fe:	bf00      	nop
 8000700:	00011940 	.word	0x00011940
 8000704:	2000001c 	.word	0x2000001c
 8000708:	08000e8c 	.word	0x08000e8c
 800070c:	2000001e 	.word	0x2000001e
 8000710:	08000e9c 	.word	0x08000e9c

08000714 <ADC1_2_IRQHandler>:
  }
}

void ADC1_2_IRQHandler()
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  if(ADC1->SR & ADC_SR_EOC)
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <ADC1_2_IRQHandler+0x2c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f003 0302 	and.w	r3, r3, #2
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <ADC1_2_IRQHandler+0x28>
  {
    adcEOC = true;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <ADC1_2_IRQHandler+0x30>)
 8000726:	2201      	movs	r2, #1
 8000728:	701a      	strb	r2, [r3, #0]
    value = adc_readValue();
 800072a:	f000 f8c7 	bl	80008bc <adc_readValue>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	; (8000748 <ADC1_2_IRQHandler+0x34>)
 8000734:	801a      	strh	r2, [r3, #0]
    NVIC_ClearPendingIRQ(ADC1_IRQn);
 8000736:	2012      	movs	r0, #18
 8000738:	f7ff ff86 	bl	8000648 <__NVIC_ClearPendingIRQ>
//    gpioC_toggle(13);
  }
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40012400 	.word	0x40012400
 8000744:	2000001c 	.word	0x2000001c
 8000748:	2000001e 	.word	0x2000001e

0800074c <SystemInit>:
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <__NVIC_EnableIRQ>:
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0b      	blt.n	8000782 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4906      	ldr	r1, [pc, #24]	; (800078c <__NVIC_EnableIRQ+0x34>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100

08000790 <adc_GPIO_config>:
#include "adc.h"

void adc_GPIO_config(){
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  //Enable PORTA clock
  RCC->APB2ENR |= 1UL << 2; // set 1
 8000794:	4b16      	ldr	r3, [pc, #88]	; (80007f0 <adc_GPIO_config+0x60>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <adc_GPIO_config+0x60>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
  //PA5: MODE-INPUT, CNF-ANALOG_MODE
  GPIOA->CRL &= ~(3UL << 20);
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <adc_GPIO_config+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <adc_GPIO_config+0x64>)
 80007a6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80007aa:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 22);
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <adc_GPIO_config+0x64>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <adc_GPIO_config+0x64>)
 80007b2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80007b6:	6013      	str	r3, [r2, #0]
  //PA4
  GPIOA->CRL &= ~(3UL << 16);
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <adc_GPIO_config+0x64>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <adc_GPIO_config+0x64>)
 80007be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80007c2:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 18);
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <adc_GPIO_config+0x64>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <adc_GPIO_config+0x64>)
 80007ca:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80007ce:	6013      	str	r3, [r2, #0]
  //PA3
  GPIOA->CRL &= ~(3UL << 12);
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <adc_GPIO_config+0x64>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <adc_GPIO_config+0x64>)
 80007d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007da:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 14);
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <adc_GPIO_config+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <adc_GPIO_config+0x64>)
 80007e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e6:	6013      	str	r3, [r2, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010800 	.word	0x40010800

080007f8 <adc_single_config>:

void adc_single_config(ADC_SingleSelect channel){
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
  //ENABLE ADC1 CLOCK
  RCC->APB2ENR |= 1UL << 9;
 8000802:	4b20      	ldr	r3, [pc, #128]	; (8000884 <adc_single_config+0x8c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a1f      	ldr	r2, [pc, #124]	; (8000884 <adc_single_config+0x8c>)
 8000808:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800080c:	6193      	str	r3, [r2, #24]
  //RIGHT ALINGN
  ADC1->CR2 &= ~(1UL << 11);
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <adc_single_config+0x90>)
 8000810:	689b      	ldr	r3, [r3, #8]
 8000812:	4a1d      	ldr	r2, [pc, #116]	; (8000888 <adc_single_config+0x90>)
 8000814:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000818:	6093      	str	r3, [r2, #8]
  /* select Data alignment and Continuous conversion
   *
   * Tại thanh ghi CR2 có giá trị reset là 0
   * Vì vậy tự động là right align and continous  */
  //SINGLE CONSERVATION
  ADC1->CR2 &= ~(1UL << 1);
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <adc_single_config+0x90>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	4a1a      	ldr	r2, [pc, #104]	; (8000888 <adc_single_config+0x90>)
 8000820:	f023 0302 	bic.w	r3, r3, #2
 8000824:	6093      	str	r3, [r2, #8]
  //SOFTWARE TRIGGER
  ADC1->CR2 |= (7UL << 17);
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <adc_single_config+0x90>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a17      	ldr	r2, [pc, #92]	; (8000888 <adc_single_config+0x90>)
 800082c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000830:	6093      	str	r3, [r2, #8]
  //SAMPLE TIME: CHOOSE 28 CYCLE <=> (12 + 28)/ 12 = 3.3us
  //PA5, PA4, PA3
  ADC1->SMPR2 |= (3UL << 15);
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <adc_single_config+0x90>)
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <adc_single_config+0x90>)
 8000838:	f443 33c0 	orr.w	r3, r3, #98304	; 0x18000
 800083c:	6113      	str	r3, [r2, #16]
  ADC1->SMPR2 |= (3UL << 12);
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <adc_single_config+0x90>)
 8000840:	691b      	ldr	r3, [r3, #16]
 8000842:	4a11      	ldr	r2, [pc, #68]	; (8000888 <adc_single_config+0x90>)
 8000844:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000848:	6113      	str	r3, [r2, #16]
  ADC1->SMPR2 |= (3UL << 9);
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <adc_single_config+0x90>)
 800084c:	691b      	ldr	r3, [r3, #16]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <adc_single_config+0x90>)
 8000850:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8000854:	6113      	str	r3, [r2, #16]
  //Xác định số lượng chuyển đổi: No of conservation = 1
//  ADC1->SQR1 &= ~(15UL << 20);
  //RANK1 CHANNEL5,4,3
  ADC1->SQR3 = channel;
 8000856:	4a0c      	ldr	r2, [pc, #48]	; (8000888 <adc_single_config+0x90>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	6353      	str	r3, [r2, #52]	; 0x34

  //POWER UP ADC
  ADC1->CR2 |= (1UL << 0);
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <adc_single_config+0x90>)
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	4a09      	ldr	r2, [pc, #36]	; (8000888 <adc_single_config+0x90>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6093      	str	r3, [r2, #8]
  //WAIT FOR ADC STABILIZE
  for(uint16_t i=0; i<36; i++);
 8000868:	2300      	movs	r3, #0
 800086a:	81fb      	strh	r3, [r7, #14]
 800086c:	e002      	b.n	8000874 <adc_single_config+0x7c>
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	3301      	adds	r3, #1
 8000872:	81fb      	strh	r3, [r7, #14]
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	2b23      	cmp	r3, #35	; 0x23
 8000878:	d9f9      	bls.n	800086e <adc_single_config+0x76>

}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40012400 	.word	0x40012400

0800088c <adc_Start>:

void adc_Start(){
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  ADC1->SR = 0;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <adc_Start+0x2c>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
  ADC1->CR2 |= (1UL << 22);
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <adc_Start+0x2c>)
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <adc_Start+0x2c>)
 800089c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008a0:	6093      	str	r3, [r2, #8]
  ADC1->CR2 |= (1UL << 0);
 80008a2:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <adc_Start+0x2c>)
 80008a4:	689b      	ldr	r3, [r3, #8]
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <adc_Start+0x2c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6093      	str	r3, [r2, #8]
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40012400 	.word	0x40012400

080008bc <adc_readValue>:
    }
  }
  return true;
}

uint16_t adc_readValue(){
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  return (ADC1->DR);
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <adc_readValue+0x14>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	b29b      	uxth	r3, r3
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bc80      	pop	{r7}
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40012400 	.word	0x40012400

080008d4 <adc_enableEOC>:


void adc_enableEOC()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  ADC1->CR1 |= ADC_CR1_EOCIE;
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <adc_enableEOC+0x1c>)
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <adc_enableEOC+0x1c>)
 80008de:	f043 0320 	orr.w	r3, r3, #32
 80008e2:	6053      	str	r3, [r2, #4]
  NVIC_EnableIRQ(ADC1_IRQn);
 80008e4:	2012      	movs	r0, #18
 80008e6:	f7ff ff37 	bl	8000758 <__NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012400 	.word	0x40012400

080008f4 <gpioC_config>:
#include "gpio.h"

/*
 *    @brief PORT C
 */
void gpioC_config(){
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* Enable port clock */
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN); //clear
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <gpioC_config+0x48>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a0f      	ldr	r2, [pc, #60]	; (800093c <gpioC_config+0x48>)
 80008fe:	f023 0310 	bic.w	r3, r3, #16
 8000902:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 4; // set 1
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <gpioC_config+0x48>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <gpioC_config+0x48>)
 800090a:	f043 0310 	orr.w	r3, r3, #16
 800090e:	6193      	str	r3, [r2, #24]

  /* Select Mode */
  GPIOC->CRH &= ~(3UL << 20); //PC13
 8000910:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <gpioC_config+0x4c>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <gpioC_config+0x4c>)
 8000916:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800091a:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (2UL << 20); // 10: Output mode, max speed 2 MHz.
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <gpioC_config+0x4c>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4a07      	ldr	r2, [pc, #28]	; (8000940 <gpioC_config+0x4c>)
 8000922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000926:	6053      	str	r3, [r2, #4]

  /* Select CNF */ //pull up
  GPIOC->CRH &= ~(3UL << 22); //00: General purpose output push-pull
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <gpioC_config+0x4c>)
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <gpioC_config+0x4c>)
 800092e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000932:	6053      	str	r3, [r2, #4]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	40021000 	.word	0x40021000
 8000940:	40011000 	.word	0x40011000

08000944 <gpioC_WritePin>:

void gpioC_WritePin(uint16_t pin, GPIO_PinState PinState){
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	460a      	mov	r2, r1
 800094e:	80fb      	strh	r3, [r7, #6]
 8000950:	4613      	mov	r3, r2
 8000952:	717b      	strb	r3, [r7, #5]
  if(PinState){
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d009      	beq.n	800096e <gpioC_WritePin+0x2a>
    GPIOC->ODR |= (1UL << pin);
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <gpioC_WritePin+0x48>)
 800095c:	68da      	ldr	r2, [r3, #12]
 800095e:	88fb      	ldrh	r3, [r7, #6]
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	4909      	ldr	r1, [pc, #36]	; (800098c <gpioC_WritePin+0x48>)
 8000968:	4313      	orrs	r3, r2
 800096a:	60cb      	str	r3, [r1, #12]
  }
  else{
    GPIOC->ODR &= ~(1UL << pin);
  }
}
 800096c:	e009      	b.n	8000982 <gpioC_WritePin+0x3e>
    GPIOC->ODR &= ~(1UL << pin);
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <gpioC_WritePin+0x48>)
 8000970:	68da      	ldr	r2, [r3, #12]
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	4903      	ldr	r1, [pc, #12]	; (800098c <gpioC_WritePin+0x48>)
 800097e:	4013      	ands	r3, r2
 8000980:	60cb      	str	r3, [r1, #12]
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40011000 	.word	0x40011000

08000990 <__NVIC_ClearPendingIRQ>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800099a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	db0c      	blt.n	80009bc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	f003 021f 	and.w	r2, r3, #31
 80009a8:	4907      	ldr	r1, [pc, #28]	; (80009c8 <__NVIC_ClearPendingIRQ+0x38>)
 80009aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ae:	095b      	lsrs	r3, r3, #5
 80009b0:	2001      	movs	r0, #1
 80009b2:	fa00 f202 	lsl.w	r2, r0, r2
 80009b6:	3360      	adds	r3, #96	; 0x60
 80009b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000e100 	.word	0xe000e100

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <rcc_HSE_config>:
#include "rcc.h"


static __IO uint32_t msTicks = 0;

void rcc_HSE_config(void){
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    /*  HSE = 8 MHZ
     *  AHB prescaler = 1
     *  PLLMUX = 9
     *  --> 72 MHz System Clock
    */
    RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 8000a24:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a3e      	ldr	r2, [pc, #248]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a2a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000a2e:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 8000a30:	4b3c      	ldr	r3, [pc, #240]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	4a3b      	ldr	r2, [pc, #236]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a36:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000a3a:	6053      	str	r3, [r2, #4]

    /* HSE configuration */
    RCC->CR |= (1UL << 16);
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a38      	ldr	r2, [pc, #224]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a46:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_HSERDY) == 0);
 8000a48:	bf00      	nop
 8000a4a:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0f9      	beq.n	8000a4a <rcc_HSE_config+0x2a>

    /* HSE is PLL source */
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 8000a56:	4b33      	ldr	r3, [pc, #204]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a32      	ldr	r2, [pc, #200]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a60:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (1UL << 16);
 8000a62:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	4a2f      	ldr	r2, [pc, #188]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a6c:	6053      	str	r3, [r2, #4]

    /* PLL enable and wait */
    RCC->CR |= (1UL << 24);
 8000a6e:	4b2d      	ldr	r3, [pc, #180]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a2c      	ldr	r2, [pc, #176]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a78:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 8000a7a:	bf00      	nop
 8000a7c:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <rcc_HSE_config+0x104>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f9      	beq.n	8000a7c <rcc_HSE_config+0x5c>

    //Chọn tốc độ phù hợp hệ thống vì code sẽ nạp vào FLASH
    FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <rcc_HSE_config+0x108>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a26      	ldr	r2, [pc, #152]	; (8000b28 <rcc_HSE_config+0x108>)
 8000a8e:	f023 0307 	bic.w	r3, r3, #7
 8000a92:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (2UL << 0); //set
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <rcc_HSE_config+0x108>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <rcc_HSE_config+0x108>)
 8000a9a:	f043 0302 	orr.w	r3, r3, #2
 8000a9e:	6013      	str	r3, [r2, #0]
    //Prefetch buffer enable
    FLASH->ACR |= (1UL << 4); //set
 8000aa0:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <rcc_HSE_config+0x108>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <rcc_HSE_config+0x108>)
 8000aa6:	f043 0310 	orr.w	r3, r3, #16
 8000aaa:	6013      	str	r3, [r2, #0]

    /* select system clock switch */
    RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <rcc_HSE_config+0x104>)
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ab2:	f023 0303 	bic.w	r3, r3, #3
 8000ab6:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (2UL << 0); //set
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <rcc_HSE_config+0x104>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <rcc_HSE_config+0x104>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6053      	str	r3, [r2, #4]
    while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 8000ac4:	bf00      	nop
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d0f9      	beq.n	8000ac6 <rcc_HSE_config+0xa6>

    /* Preipherals clock setup */
    //AHB prescaler
    RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 8000ad2:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000adc:	6053      	str	r3, [r2, #4]
    //APB1 prescaler /2
    RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8000ade:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <rcc_HSE_config+0x104>)
 8000ae4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ae8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //clk = 72 MHz, timer clock = 36 MHz
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <rcc_HSE_config+0x104>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <rcc_HSE_config+0x104>)
 8000af0:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000af4:	6053      	str	r3, [r2, #4]
    //APB2 prescaler /1
    RCC->CFGR &= ~(RCC_CFGR_PPRE2); //72MHz
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <rcc_HSE_config+0x104>)
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <rcc_HSE_config+0x104>)
 8000afc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b00:	6053      	str	r3, [r2, #4]
    //ADC prescaler
    RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <rcc_HSE_config+0x104>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <rcc_HSE_config+0x104>)
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6; // => 12MHZ
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <rcc_HSE_config+0x104>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <rcc_HSE_config+0x104>)
 8000b14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b18:	6053      	str	r3, [r2, #4]
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bc80      	pop	{r7}
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40022000 	.word	0x40022000

08000b2c <rcc_SysTick_config>:

void rcc_SysTick_config(uint32_t arr){
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  //Reset Control register
  SysTick->CTRL = 0;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
  //Set the Reload value
  SysTick->LOAD = arr;
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6053      	str	r3, [r2, #4]
  //Set priority SysTick interrupt (NVIC)
  NVIC_SetPriority(SysTick_IRQn, 0);
 8000b40:	2100      	movs	r1, #0
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	f7ff ff41 	bl	80009cc <__NVIC_SetPriority>
  //Reset Stick value to 0
  SysTick->VAL = 0;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  //Enable SysTick from control register
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
 8000b50:	4b0a      	ldr	r3, [pc, #40]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a09      	ldr	r2, [pc, #36]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //Enable SysTick Exceptions
 8000b5c:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a06      	ldr	r2, [pc, #24]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //Use CPU Clock
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a03      	ldr	r2, [pc, #12]	; (8000b7c <rcc_SysTick_config+0x50>)
 8000b6e:	f043 0304 	orr.w	r3, r3, #4
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <rcc_msIncTicks>:

void rcc_msIncTicks(void){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  msTicks++;
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <rcc_msIncTicks+0x18>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a03      	ldr	r2, [pc, #12]	; (8000b98 <rcc_msIncTicks+0x18>)
 8000b8c:	6013      	str	r3, [r2, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bc80      	pop	{r7}
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000020 	.word	0x20000020

08000b9c <rcc_msGetTicks>:

uint32_t rcc_msGetTicks(void){
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  return msTicks;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <rcc_msGetTicks+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000020 	.word	0x20000020

08000bb0 <rcc_msDelay>:

void rcc_msDelay(uint32_t  ms){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t startTicks = rcc_msGetTicks();
 8000bb8:	f7ff fff0 	bl	8000b9c <rcc_msGetTicks>
 8000bbc:	60f8      	str	r0, [r7, #12]
  while((rcc_msGetTicks() - startTicks) < ms);
 8000bbe:	bf00      	nop
 8000bc0:	f7ff ffec 	bl	8000b9c <rcc_msGetTicks>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d8f7      	bhi.n	8000bc0 <rcc_msDelay+0x10>
}
 8000bd0:	bf00      	nop
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <SysTick_Handler>:

void SysTick_Handler(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn); // Clear Flag
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f7ff fed6 	bl	8000990 <__NVIC_ClearPendingIRQ>
  rcc_msIncTicks();
 8000be4:	f7ff ffcc 	bl	8000b80 <rcc_msIncTicks>
}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}

08000bec <uart_UART2_putc>:

#define Perpher_CLK 18000000
#define Baudrate  9600

void uart_UART2_putc(char ch)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  /*Make sure the transmit data register is empty*/
  while(!(USART2->SR & USART_SR_TXE)); // Nếu message đang được truyền
 8000bf6:	bf00      	nop
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <uart_UART2_putc+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f9      	beq.n	8000bf8 <uart_UART2_putc+0xc>
                                       // thì hàm này sẽ không xảy ra
  /*Write to transmit data register*/
  USART2->DR  =  (ch & 0xFF);
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <uart_UART2_putc+0x28>)
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	6053      	str	r3, [r2, #4]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40004400 	.word	0x40004400

08000c18 <uart_UART2_puts>:

void uart_UART2_puts(char *str){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  while(*str != '\0'){
 8000c20:	e007      	b.n	8000c32 <uart_UART2_puts+0x1a>
    uart_UART2_putc(*str);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff ffe0 	bl	8000bec <uart_UART2_putc>
    str++;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	607b      	str	r3, [r7, #4]
  while(*str != '\0'){
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f3      	bne.n	8000c22 <uart_UART2_puts+0xa>
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <uart2_write_integer>:

void uart2_write_integer(int value)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
    char buffer[12];  // Assuming a 32-bit integer can have at most 11 digits
    int i = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

    // Handle negative numbers
    if (value < 0) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	da05      	bge.n	8000c62 <uart2_write_integer+0x1e>
      uart_UART2_putc('-');
 8000c56:	202d      	movs	r0, #45	; 0x2d
 8000c58:	f7ff ffc8 	bl	8000bec <uart_UART2_putc>
        value = -value;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	425b      	negs	r3, r3
 8000c60:	607b      	str	r3, [r7, #4]
    }

    // Convert digits to characters
    do {
        buffer[i++] = '0' + (value % 10);
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <uart2_write_integer+0x88>)
 8000c66:	fb83 1302 	smull	r1, r3, r3, r2
 8000c6a:	1099      	asrs	r1, r3, #2
 8000c6c:	17d3      	asrs	r3, r2, #31
 8000c6e:	1ac9      	subs	r1, r1, r3
 8000c70:	460b      	mov	r3, r1
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	1ad1      	subs	r1, r2, r3
 8000c7a:	b2ca      	uxtb	r2, r1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	1c59      	adds	r1, r3, #1
 8000c80:	6179      	str	r1, [r7, #20]
 8000c82:	3230      	adds	r2, #48	; 0x30
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	f107 0118 	add.w	r1, r7, #24
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f803 2c10 	strb.w	r2, [r3, #-16]
        value /= 10;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <uart2_write_integer+0x88>)
 8000c94:	fb82 1203 	smull	r1, r2, r2, r3
 8000c98:	1092      	asrs	r2, r2, #2
 8000c9a:	17db      	asrs	r3, r3, #31
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	607b      	str	r3, [r7, #4]
    } while (value > 0);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	dcdd      	bgt.n	8000c62 <uart2_write_integer+0x1e>

    // Reverse the string
    while (i > 0) {
 8000ca6:	e00a      	b.n	8000cbe <uart2_write_integer+0x7a>
      uart_UART2_putc(buffer[--i]);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	f107 0208 	add.w	r2, r7, #8
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff ff97 	bl	8000bec <uart_UART2_putc>
    while (i > 0) {
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dcf1      	bgt.n	8000ca8 <uart2_write_integer+0x64>
    }
}
 8000cc4:	bf00      	nop
 8000cc6:	3718      	adds	r7, #24
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	66666667 	.word	0x66666667

08000cd0 <uart_UART2_GPIO_config>:
void uart_UART2_GPIO_config(){
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
   *  A2 - TX2: output
   *  A3 - RX3: input
   */

  //Enable PORT_A clock
  RCC->APB2ENR |= (1UL << 2);
 8000cd4:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <uart_UART2_GPIO_config+0x60>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <uart_UART2_GPIO_config+0x60>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
  //ENABLE CLOCK as alternate function
  RCC->APB2ENR |= (1UL << 0);
 8000ce0:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <uart_UART2_GPIO_config+0x60>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <uart_UART2_GPIO_config+0x60>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6193      	str	r3, [r2, #24]

  /*
   *  @brief Config PA2 as output 50mhz
   *         and alternate output function push - pull
   */
  GPIOA->CRL &= ~(3UL << 8); //CLEAR MODE
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000cf6:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (3UL << 8); //SET MODE 11
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000cfe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000d02:	6013      	str	r3, [r2, #0]
  GPIOA->CRL &= ~(3UL << 10); //CLEAR CNF
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000d0a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000d0e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL |= (2UL << 10); //SET CNF OUTPUT AS AF
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <uart_UART2_GPIO_config+0x64>)
 8000d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1a:	6013      	str	r3, [r2, #0]

  /* DONT REMAP PA2 FOR USART2 */
  AFIO->MAPR &= ~(1UL << 3);
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <uart_UART2_GPIO_config+0x68>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <uart_UART2_GPIO_config+0x68>)
 8000d22:	f023 0308 	bic.w	r3, r3, #8
 8000d26:	6053      	str	r3, [r2, #4]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010800 	.word	0x40010800
 8000d38:	40010000 	.word	0x40010000

08000d3c <uart_UART2_config>:
/* USART1 configuration*/
void uart_UART2_config(){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
  //ENABLE USART2 CLOCK
  RCC->APB1ENR |= 1UL << 17;
 8000d42:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <uart_UART2_config+0x98>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <uart_UART2_config+0x98>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	61d3      	str	r3, [r2, #28]

  //Transmit Enable
  USART2->CR1 |= USART_CR1_TE;
 8000d4e:	4b22      	ldr	r3, [pc, #136]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000d54:	f043 0308 	orr.w	r3, r3, #8
 8000d58:	60d3      	str	r3, [r2, #12]

  //SETUP BAUDRATE
  float usart_div = 0;
 8000d5a:	f04f 0300 	mov.w	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  uint32_t div_Ma = 0, div_Fra = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  usart_div = Perpher_CLK / (16.0 * Baudrate);
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <uart_UART2_config+0xa0>)
 8000d6a:	60fb      	str	r3, [r7, #12]
  div_Ma = usart_div;
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fc4b 	bl	8000608 <__aeabi_f2uiz>
 8000d72:	4603      	mov	r3, r0
 8000d74:	60bb      	str	r3, [r7, #8]
  div_Fra = (usart_div - div_Ma)*16;
 8000d76:	68b8      	ldr	r0, [r7, #8]
 8000d78:	f7ff fa9e 	bl	80002b8 <__aeabi_ui2f>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	4619      	mov	r1, r3
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff f9e7 	bl	8000154 <__aeabi_fsub>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff faeb 	bl	8000368 <__aeabi_fmul>
 8000d92:	4603      	mov	r3, r0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fc37 	bl	8000608 <__aeabi_f2uiz>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	607b      	str	r3, [r7, #4]
  USART2->BRR = 0;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  USART2->BRR |= (div_Ma << 4);
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	490a      	ldr	r1, [pc, #40]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000dae:	4313      	orrs	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
  USART2->BRR |= (div_Fra << 0);
 8000db2:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	4908      	ldr	r1, [pc, #32]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	608b      	str	r3, [r1, #8]

  //OR CÓ THỂ SET BRR
//  USART2->BRR =  ((Perpher_CLK + (Baudrate/2U))/Baudrate);

  //ENABLE USART2
  USART2->CR1 |= USART_CR1_UE;
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <uart_UART2_config+0x9c>)
 8000dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dc8:	60d3      	str	r3, [r2, #12]

}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	42ea6000 	.word	0x42ea6000

08000de0 <Reset_Handler>:
 8000de0:	f7ff fcb4 	bl	800074c <SystemInit>
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <LoopFillZerobss+0xe>)
 8000de6:	490c      	ldr	r1, [pc, #48]	; (8000e18 <LoopFillZerobss+0x12>)
 8000de8:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <LoopFillZerobss+0x16>)
 8000dea:	2300      	movs	r3, #0
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:
 8000dee:	58d4      	ldr	r4, [r2, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:
 8000df4:	18c4      	adds	r4, r0, r3
 8000df6:	428c      	cmp	r4, r1
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
 8000dfa:	4a09      	ldr	r2, [pc, #36]	; (8000e20 <LoopFillZerobss+0x1a>)
 8000dfc:	4c09      	ldr	r4, [pc, #36]	; (8000e24 <LoopFillZerobss+0x1e>)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:
 8000e06:	42a2      	cmp	r2, r4
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>
 8000e0a:	f000 f80f 	bl	8000e2c <__libc_init_array>
 8000e0e:	f7ff fc39 	bl	8000684 <main>
 8000e12:	4770      	bx	lr
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	08000ea8 	.word	0x08000ea8
 8000e20:	20000000 	.word	0x20000000
 8000e24:	20000024 	.word	0x20000024

08000e28 <BusFault_Handler>:
 8000e28:	e7fe      	b.n	8000e28 <BusFault_Handler>
	...

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	2500      	movs	r5, #0
 8000e30:	4e0c      	ldr	r6, [pc, #48]	; (8000e64 <__libc_init_array+0x38>)
 8000e32:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e34:	1ba4      	subs	r4, r4, r6
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	42a5      	cmp	r5, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	f000 f81a 	bl	8000e74 <_init>
 8000e40:	2500      	movs	r5, #0
 8000e42:	4e0a      	ldr	r6, [pc, #40]	; (8000e6c <__libc_init_array+0x40>)
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <__libc_init_array+0x44>)
 8000e46:	1ba4      	subs	r4, r4, r6
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e54:	4798      	blx	r3
 8000e56:	3501      	adds	r5, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e5e:	4798      	blx	r3
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000ea0 	.word	0x08000ea0
 8000e68:	08000ea0 	.word	0x08000ea0
 8000e6c:	08000ea0 	.word	0x08000ea0
 8000e70:	08000ea4 	.word	0x08000ea4

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	bf00      	nop
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	bf00      	nop
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
