
I2C_Soft.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08000fb4  08000fb4  00010fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800101c  0800101c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800101c  0800101c  0001101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001020  08001020  00011020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  08001088  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001088  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004755  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cf9  00000000  00000000  000247e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000210  00000000  00000000  000254e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  000256f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012638  00000000  00000000  00025888  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002e3a  00000000  00000000  00037ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00059dd5  00000000  00000000  0003acfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00094acf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000be8  00000000  00000000  00094b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000064 	.word	0x20000064
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f9c 	.word	0x08000f9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000068 	.word	0x20000068
 800016c:	08000f9c 	.word	0x08000f9c

08000170 <main>:
#include <main.h>

uint8_t i2c_Scan( uint8_t add);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 8000176:	f000 f8ef 	bl	8000358 <rcc_HSE_config>
  rcc_TIMER3_config();
 800017a:	f000 f967 	bl	800044c <rcc_TIMER3_config>
  uart2_init();
 800017e:	f000 fa01 	bl	8000584 <uart2_init>
  i2c_Init();
 8000182:	f000 f8b5 	bl	80002f0 <i2c_Init>
  uint8_t u8Address=0;
 8000186:	2300      	movs	r3, #0
 8000188:	71fb      	strb	r3, [r7, #7]
  uint8_t u8Check = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	71bb      	strb	r3, [r7, #6]
//	      if(u8Check==0) {
//	        printf("Address: 0x%X\n\r", u8Address);
//
//	      }
//	    }
	    printf("a\n");
 800018e:	4804      	ldr	r0, [pc, #16]	; (80001a0 <main+0x30>)
 8000190:	f000 fafa 	bl	8000788 <puts>

    delay_ms(1170); // 2s/1us * 1.17 = 2340000
 8000194:	f240 4092 	movw	r0, #1170	; 0x492
 8000198:	f000 f998 	bl	80004cc <delay_ms>
	    printf("a\n");
 800019c:	e7f7      	b.n	800018e <main+0x1e>
 800019e:	bf00      	nop
 80001a0:	08000fb4 	.word	0x08000fb4

080001a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	60f8      	str	r0, [r7, #12]
 80001ac:	60b9      	str	r1, [r7, #8]
 80001ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001b0:	2300      	movs	r3, #0
 80001b2:	617b      	str	r3, [r7, #20]
 80001b4:	e00a      	b.n	80001cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80001b6:	f3af 8000 	nop.w
 80001ba:	4601      	mov	r1, r0
 80001bc:	68bb      	ldr	r3, [r7, #8]
 80001be:	1c5a      	adds	r2, r3, #1
 80001c0:	60ba      	str	r2, [r7, #8]
 80001c2:	b2ca      	uxtb	r2, r1
 80001c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001c6:	697b      	ldr	r3, [r7, #20]
 80001c8:	3301      	adds	r3, #1
 80001ca:	617b      	str	r3, [r7, #20]
 80001cc:	697a      	ldr	r2, [r7, #20]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	429a      	cmp	r2, r3
 80001d2:	dbf0      	blt.n	80001b6 <_read+0x12>
	}

return len;
 80001d4:	687b      	ldr	r3, [r7, #4]
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	3718      	adds	r7, #24
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}

080001de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b086      	sub	sp, #24
 80001e2:	af00      	add	r7, sp, #0
 80001e4:	60f8      	str	r0, [r7, #12]
 80001e6:	60b9      	str	r1, [r7, #8]
 80001e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
 80001ee:	e009      	b.n	8000204 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80001f0:	68bb      	ldr	r3, [r7, #8]
 80001f2:	1c5a      	adds	r2, r3, #1
 80001f4:	60ba      	str	r2, [r7, #8]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f9b7 	bl	800056c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80001fe:	697b      	ldr	r3, [r7, #20]
 8000200:	3301      	adds	r3, #1
 8000202:	617b      	str	r3, [r7, #20]
 8000204:	697a      	ldr	r2, [r7, #20]
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	429a      	cmp	r2, r3
 800020a:	dbf1      	blt.n	80001f0 <_write+0x12>
	}
	return len;
 800020c:	687b      	ldr	r3, [r7, #4]
}
 800020e:	4618      	mov	r0, r3
 8000210:	3718      	adds	r7, #24
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}

08000216 <_close>:

int _close(int file)
{
 8000216:	b480      	push	{r7}
 8000218:	b083      	sub	sp, #12
 800021a:	af00      	add	r7, sp, #0
 800021c:	6078      	str	r0, [r7, #4]
	return -1;
 800021e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000222:	4618      	mov	r0, r3
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	bc80      	pop	{r7}
 800022a:	4770      	bx	lr

0800022c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800023c:	605a      	str	r2, [r3, #4]
	return 0;
 800023e:	2300      	movs	r3, #0
}
 8000240:	4618      	mov	r0, r3
 8000242:	370c      	adds	r7, #12
 8000244:	46bd      	mov	sp, r7
 8000246:	bc80      	pop	{r7}
 8000248:	4770      	bx	lr

0800024a <_isatty>:

int _isatty(int file)
{
 800024a:	b480      	push	{r7}
 800024c:	b083      	sub	sp, #12
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
	return 1;
 8000252:	2301      	movs	r3, #1
}
 8000254:	4618      	mov	r0, r3
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800025e:	b480      	push	{r7}
 8000260:	b085      	sub	sp, #20
 8000262:	af00      	add	r7, sp, #0
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
	return 0;
 800026a:	2300      	movs	r3, #0
}
 800026c:	4618      	mov	r0, r3
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
	...

08000278 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000280:	4a14      	ldr	r2, [pc, #80]	; (80002d4 <_sbrk+0x5c>)
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <_sbrk+0x60>)
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000288:	697b      	ldr	r3, [r7, #20]
 800028a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800028c:	4b13      	ldr	r3, [pc, #76]	; (80002dc <_sbrk+0x64>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d102      	bne.n	800029a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <_sbrk+0x64>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <_sbrk+0x68>)
 8000298:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <_sbrk+0x64>)
 800029c:	681a      	ldr	r2, [r3, #0]
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4413      	add	r3, r2
 80002a2:	693a      	ldr	r2, [r7, #16]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d207      	bcs.n	80002b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002a8:	f000 f9e0 	bl	800066c <__errno>
 80002ac:	4602      	mov	r2, r0
 80002ae:	230c      	movs	r3, #12
 80002b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80002b2:	f04f 33ff 	mov.w	r3, #4294967295
 80002b6:	e009      	b.n	80002cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80002b8:	4b08      	ldr	r3, [pc, #32]	; (80002dc <_sbrk+0x64>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80002be:	4b07      	ldr	r3, [pc, #28]	; (80002dc <_sbrk+0x64>)
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4413      	add	r3, r2
 80002c6:	4a05      	ldr	r2, [pc, #20]	; (80002dc <_sbrk+0x64>)
 80002c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80002ca:	68fb      	ldr	r3, [r7, #12]
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20005000 	.word	0x20005000
 80002d8:	00000400 	.word	0x00000400
 80002dc:	20000080 	.word	0x20000080
 80002e0:	20000090 	.word	0x20000090

080002e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <i2c_Init>:
 *      Author: Quang Huy
 */

#include "i2c.h"

void i2c_Init(){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  //Enable clock PORTB
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <i2c_Init+0x60>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a15      	ldr	r2, [pc, #84]	; (8000350 <i2c_Init+0x60>)
 80002fa:	f043 0308 	orr.w	r3, r3, #8
 80002fe:	6193      	str	r3, [r2, #24]

  //Khai bao SCL SDA output open drain
  SDA_OUT();
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <i2c_Init+0x64>)
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <i2c_Init+0x64>)
 8000306:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800030a:	6053      	str	r3, [r2, #4]
 800030c:	4b11      	ldr	r3, [pc, #68]	; (8000354 <i2c_Init+0x64>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a10      	ldr	r2, [pc, #64]	; (8000354 <i2c_Init+0x64>)
 8000312:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000316:	6053      	str	r3, [r2, #4]
  SCL_OUT();
 8000318:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <i2c_Init+0x64>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <i2c_Init+0x64>)
 800031e:	f023 030f 	bic.w	r3, r3, #15
 8000322:	6053      	str	r3, [r2, #4]
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <i2c_Init+0x64>)
 8000326:	685b      	ldr	r3, [r3, #4]
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <i2c_Init+0x64>)
 800032a:	f043 0303 	orr.w	r3, r3, #3
 800032e:	6053      	str	r3, [r2, #4]
  //Khoi tao gia tri ban dau = 1
  I2C_SCL_1;
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <i2c_Init+0x64>)
 8000332:	691b      	ldr	r3, [r3, #16]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <i2c_Init+0x64>)
 8000336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800033a:	6113      	str	r3, [r2, #16]
  I2C_SDA_1;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <i2c_Init+0x64>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <i2c_Init+0x64>)
 8000342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000346:	6113      	str	r3, [r2, #16]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00

08000358 <rcc_HSE_config>:
#include "rcc.h"

void rcc_HSE_config(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
    /*  HSE = 8 MHZ
     *  AHB prescaler = 1
     *  PLLMUX = 9
     *  --> 72 MHz System Clock
    */
    RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 800035c:	4b39      	ldr	r3, [pc, #228]	; (8000444 <rcc_HSE_config+0xec>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a38      	ldr	r2, [pc, #224]	; (8000444 <rcc_HSE_config+0xec>)
 8000362:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000366:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 8000368:	4b36      	ldr	r3, [pc, #216]	; (8000444 <rcc_HSE_config+0xec>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a35      	ldr	r2, [pc, #212]	; (8000444 <rcc_HSE_config+0xec>)
 800036e:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000372:	6053      	str	r3, [r2, #4]

    /* HSE configuration */
    RCC->CR |= (1UL << 16);
 8000374:	4b33      	ldr	r3, [pc, #204]	; (8000444 <rcc_HSE_config+0xec>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a32      	ldr	r2, [pc, #200]	; (8000444 <rcc_HSE_config+0xec>)
 800037a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800037e:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_HSERDY) == 0);
 8000380:	bf00      	nop
 8000382:	4b30      	ldr	r3, [pc, #192]	; (8000444 <rcc_HSE_config+0xec>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <rcc_HSE_config+0x2a>

    /* HSE is PLL source */
    RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <rcc_HSE_config+0xec>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <rcc_HSE_config+0xec>)
 8000394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000398:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (1UL << 16);
 800039a:	4b2a      	ldr	r3, [pc, #168]	; (8000444 <rcc_HSE_config+0xec>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	4a29      	ldr	r2, [pc, #164]	; (8000444 <rcc_HSE_config+0xec>)
 80003a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003a4:	6053      	str	r3, [r2, #4]

    /* PLL enable and wait */
    RCC->CR |= (1UL << 24);
 80003a6:	4b27      	ldr	r3, [pc, #156]	; (8000444 <rcc_HSE_config+0xec>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a26      	ldr	r2, [pc, #152]	; (8000444 <rcc_HSE_config+0xec>)
 80003ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003b0:	6013      	str	r3, [r2, #0]
    while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 80003b2:	bf00      	nop
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <rcc_HSE_config+0xec>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <rcc_HSE_config+0x5c>

    //Chọn tốc độ phù hợp hệ thống vì code sẽ nạp vào FLASH
    FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 80003c0:	4b21      	ldr	r3, [pc, #132]	; (8000448 <rcc_HSE_config+0xf0>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a20      	ldr	r2, [pc, #128]	; (8000448 <rcc_HSE_config+0xf0>)
 80003c6:	f023 0307 	bic.w	r3, r3, #7
 80003ca:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (2UL << 0); //set
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <rcc_HSE_config+0xf0>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a1d      	ldr	r2, [pc, #116]	; (8000448 <rcc_HSE_config+0xf0>)
 80003d2:	f043 0302 	orr.w	r3, r3, #2
 80003d6:	6013      	str	r3, [r2, #0]
    //Prefetch buffer enable
    FLASH->ACR |= (1UL << 4); //set
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <rcc_HSE_config+0xf0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1a      	ldr	r2, [pc, #104]	; (8000448 <rcc_HSE_config+0xf0>)
 80003de:	f043 0310 	orr.w	r3, r3, #16
 80003e2:	6013      	str	r3, [r2, #0]

    /* select system clock switch */
    RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 80003e4:	4b17      	ldr	r3, [pc, #92]	; (8000444 <rcc_HSE_config+0xec>)
 80003e6:	685b      	ldr	r3, [r3, #4]
 80003e8:	4a16      	ldr	r2, [pc, #88]	; (8000444 <rcc_HSE_config+0xec>)
 80003ea:	f023 0303 	bic.w	r3, r3, #3
 80003ee:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (2UL << 0); //set
 80003f0:	4b14      	ldr	r3, [pc, #80]	; (8000444 <rcc_HSE_config+0xec>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4a13      	ldr	r2, [pc, #76]	; (8000444 <rcc_HSE_config+0xec>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6053      	str	r3, [r2, #4]
    while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 80003fc:	bf00      	nop
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <rcc_HSE_config+0xec>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	f003 0308 	and.w	r3, r3, #8
 8000406:	2b00      	cmp	r3, #0
 8000408:	d0f9      	beq.n	80003fe <rcc_HSE_config+0xa6>

    /* Preipherals clock setup */
    //AHB prescaler
    RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 800040a:	4b0e      	ldr	r3, [pc, #56]	; (8000444 <rcc_HSE_config+0xec>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	4a0d      	ldr	r2, [pc, #52]	; (8000444 <rcc_HSE_config+0xec>)
 8000410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000414:	6053      	str	r3, [r2, #4]
    //APB1 prescaler /2
    RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <rcc_HSE_config+0xec>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <rcc_HSE_config+0xec>)
 800041c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000420:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000422:	4b08      	ldr	r3, [pc, #32]	; (8000444 <rcc_HSE_config+0xec>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a07      	ldr	r2, [pc, #28]	; (8000444 <rcc_HSE_config+0xec>)
 8000428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042c:	6053      	str	r3, [r2, #4]
    //APB2 prescaler /1
    RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800042e:	4b05      	ldr	r3, [pc, #20]	; (8000444 <rcc_HSE_config+0xec>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	4a04      	ldr	r2, [pc, #16]	; (8000444 <rcc_HSE_config+0xec>)
 8000434:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000438:	6053      	str	r3, [r2, #4]
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000
 8000448:	40022000 	.word	0x40022000

0800044c <rcc_TIMER3_config>:

void rcc_TIMER3_config(){
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= 1UL << 1;
 8000450:	4b09      	ldr	r3, [pc, #36]	; (8000478 <rcc_TIMER3_config+0x2c>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <rcc_TIMER3_config+0x2c>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	61d3      	str	r3, [r2, #28]

    /*
     *  Clock APB1 = 72Mhz
     *  T_mong_muon = 1us => f = 1MHz
     * */
    TIM3 -> PSC = 0;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <rcc_TIMER3_config+0x30>)
 800045e:	2200      	movs	r2, #0
 8000460:	629a      	str	r2, [r3, #40]	; 0x28

    /*Theo tính toán thì ARR = 71 nhưng do time sai
     * => căn chỉnh xuống 61
     * => 1us tương đương giá trị nạp vào là 1.17 */
    TIM3 -> ARR = 61;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <rcc_TIMER3_config+0x30>)
 8000464:	223d      	movs	r2, #61	; 0x3d
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM3->CR1 = (1 << 0);
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <rcc_TIMER3_config+0x30>)
 800046a:	2201      	movs	r2, #1
 800046c:	601a      	str	r2, [r3, #0]
}
 800046e:	bf00      	nop
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40000400 	.word	0x40000400

08000480 <delay_us>:

void delay_us(uint32_t us){
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  uint32_t i;
  for( i = 0; i <= us; i++ )
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	e012      	b.n	80004b4 <delay_us+0x34>
  {
    /* Clear the count */
    TIM3->CNT = 0;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <delay_us+0x48>)
 8000490:	2200      	movs	r2, #0
 8000492:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait UIF to be set */
    while((TIM3->SR & TIM_SR_UIF) == 0);    /* This will generate 1us delay */
 8000494:	bf00      	nop
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <delay_us+0x48>)
 8000498:	691b      	ldr	r3, [r3, #16]
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d0f9      	beq.n	8000496 <delay_us+0x16>

    /* Reset UIF */
    TIM3->SR &= ~TIM_SR_UIF;
 80004a2:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <delay_us+0x48>)
 80004a4:	691b      	ldr	r3, [r3, #16]
 80004a6:	4a08      	ldr	r2, [pc, #32]	; (80004c8 <delay_us+0x48>)
 80004a8:	f023 0301 	bic.w	r3, r3, #1
 80004ac:	6113      	str	r3, [r2, #16]
  for( i = 0; i <= us; i++ )
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	3301      	adds	r3, #1
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d9e8      	bls.n	800048e <delay_us+0xe>
  }
}
 80004bc:	bf00      	nop
 80004be:	3714      	adds	r7, #20
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bc80      	pop	{r7}
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	40000400 	.word	0x40000400

080004cc <delay_ms>:

void delay_ms(uint32_t ms){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  for( i = 0; i <= 1000; i++ ){
 80004d4:	2300      	movs	r3, #0
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	e005      	b.n	80004e6 <delay_ms+0x1a>
    delay_us(ms);
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f7ff ffd0 	bl	8000480 <delay_us>
  for( i = 0; i <= 1000; i++ ){
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	3301      	adds	r3, #1
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004ec:	d9f5      	bls.n	80004da <delay_ms+0xe>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3710      	adds	r7, #16
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <compute_uart_bd>:

#define Perpher_CLK 36000000 //Tần số này sẽ phải dựa vào PCLK1=18MHz
#define Baudrate  9600

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	085a      	lsrs	r2, r3, #1
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	441a      	add	r2, r3
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	fbb2 f3f3 	udiv	r3, r2, r3
 800050e:	b29b      	uxth	r3, r3
}
 8000510:	4618      	mov	r0, r3
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr

0800051a <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b084      	sub	sp, #16
 800051e:	af00      	add	r7, sp, #0
 8000520:	60f8      	str	r0, [r7, #12]
 8000522:	60b9      	str	r1, [r7, #8]
 8000524:	607a      	str	r2, [r7, #4]
  USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 8000526:	6879      	ldr	r1, [r7, #4]
 8000528:	68b8      	ldr	r0, [r7, #8]
 800052a:	f7ff ffe4 	bl	80004f6 <compute_uart_bd>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	609a      	str	r2, [r3, #8]
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <uart2_write>:

void uart2_write(int ch)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /*Make sure the transmit data register is empty*/
  while(!(USART2->SR & USART_SR_TXE)){}
 8000548:	bf00      	nop
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <uart2_write+0x28>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f9      	beq.n	800054a <uart2_write+0xa>

  /*Write to transmit data register*/
  USART2->DR  =  (ch & 0xFF);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	4a03      	ldr	r2, [pc, #12]	; (8000568 <uart2_write+0x28>)
 800055a:	b2db      	uxtb	r3, r3
 800055c:	6053      	str	r3, [r2, #4]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40004400 	.word	0x40004400

0800056c <__io_putchar>:
 int __io_putchar(int ch) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
   uart2_write(ch);
 8000574:	6878      	ldr	r0, [r7, #4]
 8000576:	f7ff ffe3 	bl	8000540 <uart2_write>
   return ch;
 800057a:	687b      	ldr	r3, [r7, #4]
 }
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <uart2_init>:


void uart2_init()
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /*UART2 Pin configures*/

  //enable clock access to GPIOA
  RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <uart2_init+0x80>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <uart2_init+0x80>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
  //Enable clock access to alternate function
  RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <uart2_init+0x80>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1a      	ldr	r2, [pc, #104]	; (8000604 <uart2_init+0x80>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6193      	str	r3, [r2, #24]

  /*Confgiure PA2 as output maximum speed to 50MHz
   * and alternate output push-pull mode*/
  GPIOA->CRL|=GPIO_CRL_MODE2;
 80005a0:	4b19      	ldr	r3, [pc, #100]	; (8000608 <uart2_init+0x84>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a18      	ldr	r2, [pc, #96]	; (8000608 <uart2_init+0x84>)
 80005a6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80005aa:	6013      	str	r3, [r2, #0]

  GPIOA->CRL|=GPIO_CRL_CNF2_1;
 80005ac:	4b16      	ldr	r3, [pc, #88]	; (8000608 <uart2_init+0x84>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a15      	ldr	r2, [pc, #84]	; (8000608 <uart2_init+0x84>)
 80005b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b6:	6013      	str	r3, [r2, #0]
  GPIOA->CRL&=~GPIO_CRL_CNF2_0;
 80005b8:	4b13      	ldr	r3, [pc, #76]	; (8000608 <uart2_init+0x84>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a12      	ldr	r2, [pc, #72]	; (8000608 <uart2_init+0x84>)
 80005be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005c2:	6013      	str	r3, [r2, #0]

  /*Don't remap the pins*/
  AFIO->MAPR&=~AFIO_MAPR_USART2_REMAP;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <uart2_init+0x88>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a10      	ldr	r2, [pc, #64]	; (800060c <uart2_init+0x88>)
 80005ca:	f023 0308 	bic.w	r3, r3, #8
 80005ce:	6053      	str	r3, [r2, #4]


  /*USART2 configuration*/
  //enable clock access to USART2
  RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <uart2_init+0x80>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <uart2_init+0x80>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	61d3      	str	r3, [r2, #28]

  //Transmit Enable
  USART2->CR1 |= USART_CR1_TE;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <uart2_init+0x8c>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	4a0b      	ldr	r2, [pc, #44]	; (8000610 <uart2_init+0x8c>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	60d3      	str	r3, [r2, #12]

  /*Set baudrate */
  uart_set_baudrate(USART2,Perpher_CLK,Baudrate);
 80005e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80005ec:	4909      	ldr	r1, [pc, #36]	; (8000614 <uart2_init+0x90>)
 80005ee:	4808      	ldr	r0, [pc, #32]	; (8000610 <uart2_init+0x8c>)
 80005f0:	f7ff ff93 	bl	800051a <uart_set_baudrate>
  //Enable UART
  USART2->CR1 |= USART_CR1_UE;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <uart2_init+0x8c>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a05      	ldr	r2, [pc, #20]	; (8000610 <uart2_init+0x8c>)
 80005fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005fe:	60d3      	str	r3, [r2, #12]
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	40010800 	.word	0x40010800
 800060c:	40010000 	.word	0x40010000
 8000610:	40004400 	.word	0x40004400
 8000614:	02255100 	.word	0x02255100

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800061c:	f7ff fe62 	bl	80002e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f817 	bl	8000678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fd91 	bl	8000170 <main>

0800064e <LoopForever>:

LoopForever:
    b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800065c:	08001024 	.word	0x08001024
  ldr r2, =_sbss
 8000660:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000664:	20000090 	.word	0x20000090

08000668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC1_2_IRQHandler>
	...

0800066c <__errno>:
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <__errno+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <__libc_init_array>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	2500      	movs	r5, #0
 800067c:	4e0c      	ldr	r6, [pc, #48]	; (80006b0 <__libc_init_array+0x38>)
 800067e:	4c0d      	ldr	r4, [pc, #52]	; (80006b4 <__libc_init_array+0x3c>)
 8000680:	1ba4      	subs	r4, r4, r6
 8000682:	10a4      	asrs	r4, r4, #2
 8000684:	42a5      	cmp	r5, r4
 8000686:	d109      	bne.n	800069c <__libc_init_array+0x24>
 8000688:	f000 fc88 	bl	8000f9c <_init>
 800068c:	2500      	movs	r5, #0
 800068e:	4e0a      	ldr	r6, [pc, #40]	; (80006b8 <__libc_init_array+0x40>)
 8000690:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <__libc_init_array+0x44>)
 8000692:	1ba4      	subs	r4, r4, r6
 8000694:	10a4      	asrs	r4, r4, #2
 8000696:	42a5      	cmp	r5, r4
 8000698:	d105      	bne.n	80006a6 <__libc_init_array+0x2e>
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a0:	4798      	blx	r3
 80006a2:	3501      	adds	r5, #1
 80006a4:	e7ee      	b.n	8000684 <__libc_init_array+0xc>
 80006a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006aa:	4798      	blx	r3
 80006ac:	3501      	adds	r5, #1
 80006ae:	e7f2      	b.n	8000696 <__libc_init_array+0x1e>
 80006b0:	0800101c 	.word	0x0800101c
 80006b4:	0800101c 	.word	0x0800101c
 80006b8:	0800101c 	.word	0x0800101c
 80006bc:	08001020 	.word	0x08001020

080006c0 <memset>:
 80006c0:	4603      	mov	r3, r0
 80006c2:	4402      	add	r2, r0
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d100      	bne.n	80006ca <memset+0xa>
 80006c8:	4770      	bx	lr
 80006ca:	f803 1b01 	strb.w	r1, [r3], #1
 80006ce:	e7f9      	b.n	80006c4 <memset+0x4>

080006d0 <_puts_r>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	460e      	mov	r6, r1
 80006d4:	4605      	mov	r5, r0
 80006d6:	b118      	cbz	r0, 80006e0 <_puts_r+0x10>
 80006d8:	6983      	ldr	r3, [r0, #24]
 80006da:	b90b      	cbnz	r3, 80006e0 <_puts_r+0x10>
 80006dc:	f000 fa0c 	bl	8000af8 <__sinit>
 80006e0:	69ab      	ldr	r3, [r5, #24]
 80006e2:	68ac      	ldr	r4, [r5, #8]
 80006e4:	b913      	cbnz	r3, 80006ec <_puts_r+0x1c>
 80006e6:	4628      	mov	r0, r5
 80006e8:	f000 fa06 	bl	8000af8 <__sinit>
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <_puts_r+0xac>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d117      	bne.n	8000722 <_puts_r+0x52>
 80006f2:	686c      	ldr	r4, [r5, #4]
 80006f4:	89a3      	ldrh	r3, [r4, #12]
 80006f6:	071b      	lsls	r3, r3, #28
 80006f8:	d51d      	bpl.n	8000736 <_puts_r+0x66>
 80006fa:	6923      	ldr	r3, [r4, #16]
 80006fc:	b1db      	cbz	r3, 8000736 <_puts_r+0x66>
 80006fe:	3e01      	subs	r6, #1
 8000700:	68a3      	ldr	r3, [r4, #8]
 8000702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000706:	3b01      	subs	r3, #1
 8000708:	60a3      	str	r3, [r4, #8]
 800070a:	b9e9      	cbnz	r1, 8000748 <_puts_r+0x78>
 800070c:	2b00      	cmp	r3, #0
 800070e:	da2e      	bge.n	800076e <_puts_r+0x9e>
 8000710:	4622      	mov	r2, r4
 8000712:	210a      	movs	r1, #10
 8000714:	4628      	mov	r0, r5
 8000716:	f000 f83f 	bl	8000798 <__swbuf_r>
 800071a:	3001      	adds	r0, #1
 800071c:	d011      	beq.n	8000742 <_puts_r+0x72>
 800071e:	200a      	movs	r0, #10
 8000720:	e011      	b.n	8000746 <_puts_r+0x76>
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <_puts_r+0xb0>)
 8000724:	429c      	cmp	r4, r3
 8000726:	d101      	bne.n	800072c <_puts_r+0x5c>
 8000728:	68ac      	ldr	r4, [r5, #8]
 800072a:	e7e3      	b.n	80006f4 <_puts_r+0x24>
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_puts_r+0xb4>)
 800072e:	429c      	cmp	r4, r3
 8000730:	bf08      	it	eq
 8000732:	68ec      	ldreq	r4, [r5, #12]
 8000734:	e7de      	b.n	80006f4 <_puts_r+0x24>
 8000736:	4621      	mov	r1, r4
 8000738:	4628      	mov	r0, r5
 800073a:	f000 f87f 	bl	800083c <__swsetup_r>
 800073e:	2800      	cmp	r0, #0
 8000740:	d0dd      	beq.n	80006fe <_puts_r+0x2e>
 8000742:	f04f 30ff 	mov.w	r0, #4294967295
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	2b00      	cmp	r3, #0
 800074a:	da04      	bge.n	8000756 <_puts_r+0x86>
 800074c:	69a2      	ldr	r2, [r4, #24]
 800074e:	429a      	cmp	r2, r3
 8000750:	dc06      	bgt.n	8000760 <_puts_r+0x90>
 8000752:	290a      	cmp	r1, #10
 8000754:	d004      	beq.n	8000760 <_puts_r+0x90>
 8000756:	6823      	ldr	r3, [r4, #0]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	6022      	str	r2, [r4, #0]
 800075c:	7019      	strb	r1, [r3, #0]
 800075e:	e7cf      	b.n	8000700 <_puts_r+0x30>
 8000760:	4622      	mov	r2, r4
 8000762:	4628      	mov	r0, r5
 8000764:	f000 f818 	bl	8000798 <__swbuf_r>
 8000768:	3001      	adds	r0, #1
 800076a:	d1c9      	bne.n	8000700 <_puts_r+0x30>
 800076c:	e7e9      	b.n	8000742 <_puts_r+0x72>
 800076e:	200a      	movs	r0, #10
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	6022      	str	r2, [r4, #0]
 8000776:	7018      	strb	r0, [r3, #0]
 8000778:	e7e5      	b.n	8000746 <_puts_r+0x76>
 800077a:	bf00      	nop
 800077c:	08000fdc 	.word	0x08000fdc
 8000780:	08000ffc 	.word	0x08000ffc
 8000784:	08000fbc 	.word	0x08000fbc

08000788 <puts>:
 8000788:	4b02      	ldr	r3, [pc, #8]	; (8000794 <puts+0xc>)
 800078a:	4601      	mov	r1, r0
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	f7ff bf9f 	b.w	80006d0 <_puts_r>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <__swbuf_r>:
 8000798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079a:	460e      	mov	r6, r1
 800079c:	4614      	mov	r4, r2
 800079e:	4605      	mov	r5, r0
 80007a0:	b118      	cbz	r0, 80007aa <__swbuf_r+0x12>
 80007a2:	6983      	ldr	r3, [r0, #24]
 80007a4:	b90b      	cbnz	r3, 80007aa <__swbuf_r+0x12>
 80007a6:	f000 f9a7 	bl	8000af8 <__sinit>
 80007aa:	4b21      	ldr	r3, [pc, #132]	; (8000830 <__swbuf_r+0x98>)
 80007ac:	429c      	cmp	r4, r3
 80007ae:	d12a      	bne.n	8000806 <__swbuf_r+0x6e>
 80007b0:	686c      	ldr	r4, [r5, #4]
 80007b2:	69a3      	ldr	r3, [r4, #24]
 80007b4:	60a3      	str	r3, [r4, #8]
 80007b6:	89a3      	ldrh	r3, [r4, #12]
 80007b8:	071a      	lsls	r2, r3, #28
 80007ba:	d52e      	bpl.n	800081a <__swbuf_r+0x82>
 80007bc:	6923      	ldr	r3, [r4, #16]
 80007be:	b363      	cbz	r3, 800081a <__swbuf_r+0x82>
 80007c0:	6923      	ldr	r3, [r4, #16]
 80007c2:	6820      	ldr	r0, [r4, #0]
 80007c4:	b2f6      	uxtb	r6, r6
 80007c6:	1ac0      	subs	r0, r0, r3
 80007c8:	6963      	ldr	r3, [r4, #20]
 80007ca:	4637      	mov	r7, r6
 80007cc:	4283      	cmp	r3, r0
 80007ce:	dc04      	bgt.n	80007da <__swbuf_r+0x42>
 80007d0:	4621      	mov	r1, r4
 80007d2:	4628      	mov	r0, r5
 80007d4:	f000 f926 	bl	8000a24 <_fflush_r>
 80007d8:	bb28      	cbnz	r0, 8000826 <__swbuf_r+0x8e>
 80007da:	68a3      	ldr	r3, [r4, #8]
 80007dc:	3001      	adds	r0, #1
 80007de:	3b01      	subs	r3, #1
 80007e0:	60a3      	str	r3, [r4, #8]
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	1c5a      	adds	r2, r3, #1
 80007e6:	6022      	str	r2, [r4, #0]
 80007e8:	701e      	strb	r6, [r3, #0]
 80007ea:	6963      	ldr	r3, [r4, #20]
 80007ec:	4283      	cmp	r3, r0
 80007ee:	d004      	beq.n	80007fa <__swbuf_r+0x62>
 80007f0:	89a3      	ldrh	r3, [r4, #12]
 80007f2:	07db      	lsls	r3, r3, #31
 80007f4:	d519      	bpl.n	800082a <__swbuf_r+0x92>
 80007f6:	2e0a      	cmp	r6, #10
 80007f8:	d117      	bne.n	800082a <__swbuf_r+0x92>
 80007fa:	4621      	mov	r1, r4
 80007fc:	4628      	mov	r0, r5
 80007fe:	f000 f911 	bl	8000a24 <_fflush_r>
 8000802:	b190      	cbz	r0, 800082a <__swbuf_r+0x92>
 8000804:	e00f      	b.n	8000826 <__swbuf_r+0x8e>
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <__swbuf_r+0x9c>)
 8000808:	429c      	cmp	r4, r3
 800080a:	d101      	bne.n	8000810 <__swbuf_r+0x78>
 800080c:	68ac      	ldr	r4, [r5, #8]
 800080e:	e7d0      	b.n	80007b2 <__swbuf_r+0x1a>
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <__swbuf_r+0xa0>)
 8000812:	429c      	cmp	r4, r3
 8000814:	bf08      	it	eq
 8000816:	68ec      	ldreq	r4, [r5, #12]
 8000818:	e7cb      	b.n	80007b2 <__swbuf_r+0x1a>
 800081a:	4621      	mov	r1, r4
 800081c:	4628      	mov	r0, r5
 800081e:	f000 f80d 	bl	800083c <__swsetup_r>
 8000822:	2800      	cmp	r0, #0
 8000824:	d0cc      	beq.n	80007c0 <__swbuf_r+0x28>
 8000826:	f04f 37ff 	mov.w	r7, #4294967295
 800082a:	4638      	mov	r0, r7
 800082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082e:	bf00      	nop
 8000830:	08000fdc 	.word	0x08000fdc
 8000834:	08000ffc 	.word	0x08000ffc
 8000838:	08000fbc 	.word	0x08000fbc

0800083c <__swsetup_r>:
 800083c:	4b32      	ldr	r3, [pc, #200]	; (8000908 <__swsetup_r+0xcc>)
 800083e:	b570      	push	{r4, r5, r6, lr}
 8000840:	681d      	ldr	r5, [r3, #0]
 8000842:	4606      	mov	r6, r0
 8000844:	460c      	mov	r4, r1
 8000846:	b125      	cbz	r5, 8000852 <__swsetup_r+0x16>
 8000848:	69ab      	ldr	r3, [r5, #24]
 800084a:	b913      	cbnz	r3, 8000852 <__swsetup_r+0x16>
 800084c:	4628      	mov	r0, r5
 800084e:	f000 f953 	bl	8000af8 <__sinit>
 8000852:	4b2e      	ldr	r3, [pc, #184]	; (800090c <__swsetup_r+0xd0>)
 8000854:	429c      	cmp	r4, r3
 8000856:	d10f      	bne.n	8000878 <__swsetup_r+0x3c>
 8000858:	686c      	ldr	r4, [r5, #4]
 800085a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800085e:	b29a      	uxth	r2, r3
 8000860:	0715      	lsls	r5, r2, #28
 8000862:	d42c      	bmi.n	80008be <__swsetup_r+0x82>
 8000864:	06d0      	lsls	r0, r2, #27
 8000866:	d411      	bmi.n	800088c <__swsetup_r+0x50>
 8000868:	2209      	movs	r2, #9
 800086a:	6032      	str	r2, [r6, #0]
 800086c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000870:	81a3      	strh	r3, [r4, #12]
 8000872:	f04f 30ff 	mov.w	r0, #4294967295
 8000876:	e03e      	b.n	80008f6 <__swsetup_r+0xba>
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <__swsetup_r+0xd4>)
 800087a:	429c      	cmp	r4, r3
 800087c:	d101      	bne.n	8000882 <__swsetup_r+0x46>
 800087e:	68ac      	ldr	r4, [r5, #8]
 8000880:	e7eb      	b.n	800085a <__swsetup_r+0x1e>
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <__swsetup_r+0xd8>)
 8000884:	429c      	cmp	r4, r3
 8000886:	bf08      	it	eq
 8000888:	68ec      	ldreq	r4, [r5, #12]
 800088a:	e7e6      	b.n	800085a <__swsetup_r+0x1e>
 800088c:	0751      	lsls	r1, r2, #29
 800088e:	d512      	bpl.n	80008b6 <__swsetup_r+0x7a>
 8000890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000892:	b141      	cbz	r1, 80008a6 <__swsetup_r+0x6a>
 8000894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000898:	4299      	cmp	r1, r3
 800089a:	d002      	beq.n	80008a2 <__swsetup_r+0x66>
 800089c:	4630      	mov	r0, r6
 800089e:	f000 fa19 	bl	8000cd4 <_free_r>
 80008a2:	2300      	movs	r3, #0
 80008a4:	6363      	str	r3, [r4, #52]	; 0x34
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008ac:	81a3      	strh	r3, [r4, #12]
 80008ae:	2300      	movs	r3, #0
 80008b0:	6063      	str	r3, [r4, #4]
 80008b2:	6923      	ldr	r3, [r4, #16]
 80008b4:	6023      	str	r3, [r4, #0]
 80008b6:	89a3      	ldrh	r3, [r4, #12]
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	81a3      	strh	r3, [r4, #12]
 80008be:	6923      	ldr	r3, [r4, #16]
 80008c0:	b94b      	cbnz	r3, 80008d6 <__swsetup_r+0x9a>
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008cc:	d003      	beq.n	80008d6 <__swsetup_r+0x9a>
 80008ce:	4621      	mov	r1, r4
 80008d0:	4630      	mov	r0, r6
 80008d2:	f000 f9bf 	bl	8000c54 <__smakebuf_r>
 80008d6:	89a2      	ldrh	r2, [r4, #12]
 80008d8:	f012 0301 	ands.w	r3, r2, #1
 80008dc:	d00c      	beq.n	80008f8 <__swsetup_r+0xbc>
 80008de:	2300      	movs	r3, #0
 80008e0:	60a3      	str	r3, [r4, #8]
 80008e2:	6963      	ldr	r3, [r4, #20]
 80008e4:	425b      	negs	r3, r3
 80008e6:	61a3      	str	r3, [r4, #24]
 80008e8:	6923      	ldr	r3, [r4, #16]
 80008ea:	b953      	cbnz	r3, 8000902 <__swsetup_r+0xc6>
 80008ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80008f4:	d1ba      	bne.n	800086c <__swsetup_r+0x30>
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	0792      	lsls	r2, r2, #30
 80008fa:	bf58      	it	pl
 80008fc:	6963      	ldrpl	r3, [r4, #20]
 80008fe:	60a3      	str	r3, [r4, #8]
 8000900:	e7f2      	b.n	80008e8 <__swsetup_r+0xac>
 8000902:	2000      	movs	r0, #0
 8000904:	e7f7      	b.n	80008f6 <__swsetup_r+0xba>
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000
 800090c:	08000fdc 	.word	0x08000fdc
 8000910:	08000ffc 	.word	0x08000ffc
 8000914:	08000fbc 	.word	0x08000fbc

08000918 <__sflush_r>:
 8000918:	898a      	ldrh	r2, [r1, #12]
 800091a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800091e:	4605      	mov	r5, r0
 8000920:	0710      	lsls	r0, r2, #28
 8000922:	460c      	mov	r4, r1
 8000924:	d458      	bmi.n	80009d8 <__sflush_r+0xc0>
 8000926:	684b      	ldr	r3, [r1, #4]
 8000928:	2b00      	cmp	r3, #0
 800092a:	dc05      	bgt.n	8000938 <__sflush_r+0x20>
 800092c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800092e:	2b00      	cmp	r3, #0
 8000930:	dc02      	bgt.n	8000938 <__sflush_r+0x20>
 8000932:	2000      	movs	r0, #0
 8000934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000938:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800093a:	2e00      	cmp	r6, #0
 800093c:	d0f9      	beq.n	8000932 <__sflush_r+0x1a>
 800093e:	2300      	movs	r3, #0
 8000940:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000944:	682f      	ldr	r7, [r5, #0]
 8000946:	6a21      	ldr	r1, [r4, #32]
 8000948:	602b      	str	r3, [r5, #0]
 800094a:	d032      	beq.n	80009b2 <__sflush_r+0x9a>
 800094c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800094e:	89a3      	ldrh	r3, [r4, #12]
 8000950:	075a      	lsls	r2, r3, #29
 8000952:	d505      	bpl.n	8000960 <__sflush_r+0x48>
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	1ac0      	subs	r0, r0, r3
 8000958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800095a:	b10b      	cbz	r3, 8000960 <__sflush_r+0x48>
 800095c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800095e:	1ac0      	subs	r0, r0, r3
 8000960:	2300      	movs	r3, #0
 8000962:	4602      	mov	r2, r0
 8000964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000966:	6a21      	ldr	r1, [r4, #32]
 8000968:	4628      	mov	r0, r5
 800096a:	47b0      	blx	r6
 800096c:	1c43      	adds	r3, r0, #1
 800096e:	89a3      	ldrh	r3, [r4, #12]
 8000970:	d106      	bne.n	8000980 <__sflush_r+0x68>
 8000972:	6829      	ldr	r1, [r5, #0]
 8000974:	291d      	cmp	r1, #29
 8000976:	d848      	bhi.n	8000a0a <__sflush_r+0xf2>
 8000978:	4a29      	ldr	r2, [pc, #164]	; (8000a20 <__sflush_r+0x108>)
 800097a:	40ca      	lsrs	r2, r1
 800097c:	07d6      	lsls	r6, r2, #31
 800097e:	d544      	bpl.n	8000a0a <__sflush_r+0xf2>
 8000980:	2200      	movs	r2, #0
 8000982:	6062      	str	r2, [r4, #4]
 8000984:	6922      	ldr	r2, [r4, #16]
 8000986:	04d9      	lsls	r1, r3, #19
 8000988:	6022      	str	r2, [r4, #0]
 800098a:	d504      	bpl.n	8000996 <__sflush_r+0x7e>
 800098c:	1c42      	adds	r2, r0, #1
 800098e:	d101      	bne.n	8000994 <__sflush_r+0x7c>
 8000990:	682b      	ldr	r3, [r5, #0]
 8000992:	b903      	cbnz	r3, 8000996 <__sflush_r+0x7e>
 8000994:	6560      	str	r0, [r4, #84]	; 0x54
 8000996:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000998:	602f      	str	r7, [r5, #0]
 800099a:	2900      	cmp	r1, #0
 800099c:	d0c9      	beq.n	8000932 <__sflush_r+0x1a>
 800099e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009a2:	4299      	cmp	r1, r3
 80009a4:	d002      	beq.n	80009ac <__sflush_r+0x94>
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 f994 	bl	8000cd4 <_free_r>
 80009ac:	2000      	movs	r0, #0
 80009ae:	6360      	str	r0, [r4, #52]	; 0x34
 80009b0:	e7c0      	b.n	8000934 <__sflush_r+0x1c>
 80009b2:	2301      	movs	r3, #1
 80009b4:	4628      	mov	r0, r5
 80009b6:	47b0      	blx	r6
 80009b8:	1c41      	adds	r1, r0, #1
 80009ba:	d1c8      	bne.n	800094e <__sflush_r+0x36>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d0c5      	beq.n	800094e <__sflush_r+0x36>
 80009c2:	2b1d      	cmp	r3, #29
 80009c4:	d001      	beq.n	80009ca <__sflush_r+0xb2>
 80009c6:	2b16      	cmp	r3, #22
 80009c8:	d101      	bne.n	80009ce <__sflush_r+0xb6>
 80009ca:	602f      	str	r7, [r5, #0]
 80009cc:	e7b1      	b.n	8000932 <__sflush_r+0x1a>
 80009ce:	89a3      	ldrh	r3, [r4, #12]
 80009d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	e7ad      	b.n	8000934 <__sflush_r+0x1c>
 80009d8:	690f      	ldr	r7, [r1, #16]
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d0a9      	beq.n	8000932 <__sflush_r+0x1a>
 80009de:	0793      	lsls	r3, r2, #30
 80009e0:	bf18      	it	ne
 80009e2:	2300      	movne	r3, #0
 80009e4:	680e      	ldr	r6, [r1, #0]
 80009e6:	bf08      	it	eq
 80009e8:	694b      	ldreq	r3, [r1, #20]
 80009ea:	eba6 0807 	sub.w	r8, r6, r7
 80009ee:	600f      	str	r7, [r1, #0]
 80009f0:	608b      	str	r3, [r1, #8]
 80009f2:	f1b8 0f00 	cmp.w	r8, #0
 80009f6:	dd9c      	ble.n	8000932 <__sflush_r+0x1a>
 80009f8:	4643      	mov	r3, r8
 80009fa:	463a      	mov	r2, r7
 80009fc:	6a21      	ldr	r1, [r4, #32]
 80009fe:	4628      	mov	r0, r5
 8000a00:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000a02:	47b0      	blx	r6
 8000a04:	2800      	cmp	r0, #0
 8000a06:	dc06      	bgt.n	8000a16 <__sflush_r+0xfe>
 8000a08:	89a3      	ldrh	r3, [r4, #12]
 8000a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0e:	81a3      	strh	r3, [r4, #12]
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	e78e      	b.n	8000934 <__sflush_r+0x1c>
 8000a16:	4407      	add	r7, r0
 8000a18:	eba8 0800 	sub.w	r8, r8, r0
 8000a1c:	e7e9      	b.n	80009f2 <__sflush_r+0xda>
 8000a1e:	bf00      	nop
 8000a20:	20400001 	.word	0x20400001

08000a24 <_fflush_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	690b      	ldr	r3, [r1, #16]
 8000a28:	4605      	mov	r5, r0
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	b1db      	cbz	r3, 8000a66 <_fflush_r+0x42>
 8000a2e:	b118      	cbz	r0, 8000a38 <_fflush_r+0x14>
 8000a30:	6983      	ldr	r3, [r0, #24]
 8000a32:	b90b      	cbnz	r3, 8000a38 <_fflush_r+0x14>
 8000a34:	f000 f860 	bl	8000af8 <__sinit>
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <_fflush_r+0x48>)
 8000a3a:	429c      	cmp	r4, r3
 8000a3c:	d109      	bne.n	8000a52 <_fflush_r+0x2e>
 8000a3e:	686c      	ldr	r4, [r5, #4]
 8000a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a44:	b17b      	cbz	r3, 8000a66 <_fflush_r+0x42>
 8000a46:	4621      	mov	r1, r4
 8000a48:	4628      	mov	r0, r5
 8000a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a4e:	f7ff bf63 	b.w	8000918 <__sflush_r>
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_fflush_r+0x4c>)
 8000a54:	429c      	cmp	r4, r3
 8000a56:	d101      	bne.n	8000a5c <_fflush_r+0x38>
 8000a58:	68ac      	ldr	r4, [r5, #8]
 8000a5a:	e7f1      	b.n	8000a40 <_fflush_r+0x1c>
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <_fflush_r+0x50>)
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	bf08      	it	eq
 8000a62:	68ec      	ldreq	r4, [r5, #12]
 8000a64:	e7ec      	b.n	8000a40 <_fflush_r+0x1c>
 8000a66:	2000      	movs	r0, #0
 8000a68:	bd38      	pop	{r3, r4, r5, pc}
 8000a6a:	bf00      	nop
 8000a6c:	08000fdc 	.word	0x08000fdc
 8000a70:	08000ffc 	.word	0x08000ffc
 8000a74:	08000fbc 	.word	0x08000fbc

08000a78 <std>:
 8000a78:	2300      	movs	r3, #0
 8000a7a:	b510      	push	{r4, lr}
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	e9c0 3300 	strd	r3, r3, [r0]
 8000a82:	6083      	str	r3, [r0, #8]
 8000a84:	8181      	strh	r1, [r0, #12]
 8000a86:	6643      	str	r3, [r0, #100]	; 0x64
 8000a88:	81c2      	strh	r2, [r0, #14]
 8000a8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a8e:	6183      	str	r3, [r0, #24]
 8000a90:	4619      	mov	r1, r3
 8000a92:	2208      	movs	r2, #8
 8000a94:	305c      	adds	r0, #92	; 0x5c
 8000a96:	f7ff fe13 	bl	80006c0 <memset>
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <std+0x38>)
 8000a9c:	6224      	str	r4, [r4, #32]
 8000a9e:	6263      	str	r3, [r4, #36]	; 0x24
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <std+0x3c>)
 8000aa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <std+0x40>)
 8000aa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <std+0x44>)
 8000aaa:	6323      	str	r3, [r4, #48]	; 0x30
 8000aac:	bd10      	pop	{r4, pc}
 8000aae:	bf00      	nop
 8000ab0:	08000e41 	.word	0x08000e41
 8000ab4:	08000e63 	.word	0x08000e63
 8000ab8:	08000e9b 	.word	0x08000e9b
 8000abc:	08000ebf 	.word	0x08000ebf

08000ac0 <_cleanup_r>:
 8000ac0:	4901      	ldr	r1, [pc, #4]	; (8000ac8 <_cleanup_r+0x8>)
 8000ac2:	f000 b885 	b.w	8000bd0 <_fwalk_reent>
 8000ac6:	bf00      	nop
 8000ac8:	08000a25 	.word	0x08000a25

08000acc <__sfmoreglue>:
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	2568      	movs	r5, #104	; 0x68
 8000ad0:	1e4a      	subs	r2, r1, #1
 8000ad2:	4355      	muls	r5, r2
 8000ad4:	460e      	mov	r6, r1
 8000ad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ada:	f000 f947 	bl	8000d6c <_malloc_r>
 8000ade:	4604      	mov	r4, r0
 8000ae0:	b140      	cbz	r0, 8000af4 <__sfmoreglue+0x28>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	e9c0 1600 	strd	r1, r6, [r0]
 8000ae8:	300c      	adds	r0, #12
 8000aea:	60a0      	str	r0, [r4, #8]
 8000aec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000af0:	f7ff fde6 	bl	80006c0 <memset>
 8000af4:	4620      	mov	r0, r4
 8000af6:	bd70      	pop	{r4, r5, r6, pc}

08000af8 <__sinit>:
 8000af8:	6983      	ldr	r3, [r0, #24]
 8000afa:	b510      	push	{r4, lr}
 8000afc:	4604      	mov	r4, r0
 8000afe:	bb33      	cbnz	r3, 8000b4e <__sinit+0x56>
 8000b00:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000b04:	6503      	str	r3, [r0, #80]	; 0x50
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <__sinit+0x58>)
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <__sinit+0x5c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6282      	str	r2, [r0, #40]	; 0x28
 8000b0e:	4298      	cmp	r0, r3
 8000b10:	bf04      	itt	eq
 8000b12:	2301      	moveq	r3, #1
 8000b14:	6183      	streq	r3, [r0, #24]
 8000b16:	f000 f81f 	bl	8000b58 <__sfp>
 8000b1a:	6060      	str	r0, [r4, #4]
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	f000 f81b 	bl	8000b58 <__sfp>
 8000b22:	60a0      	str	r0, [r4, #8]
 8000b24:	4620      	mov	r0, r4
 8000b26:	f000 f817 	bl	8000b58 <__sfp>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60e0      	str	r0, [r4, #12]
 8000b2e:	2104      	movs	r1, #4
 8000b30:	6860      	ldr	r0, [r4, #4]
 8000b32:	f7ff ffa1 	bl	8000a78 <std>
 8000b36:	2201      	movs	r2, #1
 8000b38:	2109      	movs	r1, #9
 8000b3a:	68a0      	ldr	r0, [r4, #8]
 8000b3c:	f7ff ff9c 	bl	8000a78 <std>
 8000b40:	2202      	movs	r2, #2
 8000b42:	2112      	movs	r1, #18
 8000b44:	68e0      	ldr	r0, [r4, #12]
 8000b46:	f7ff ff97 	bl	8000a78 <std>
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61a3      	str	r3, [r4, #24]
 8000b4e:	bd10      	pop	{r4, pc}
 8000b50:	08000fb8 	.word	0x08000fb8
 8000b54:	08000ac1 	.word	0x08000ac1

08000b58 <__sfp>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <__sfp+0x70>)
 8000b5c:	4607      	mov	r7, r0
 8000b5e:	681e      	ldr	r6, [r3, #0]
 8000b60:	69b3      	ldr	r3, [r6, #24]
 8000b62:	b913      	cbnz	r3, 8000b6a <__sfp+0x12>
 8000b64:	4630      	mov	r0, r6
 8000b66:	f7ff ffc7 	bl	8000af8 <__sinit>
 8000b6a:	3648      	adds	r6, #72	; 0x48
 8000b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	d503      	bpl.n	8000b7c <__sfp+0x24>
 8000b74:	6833      	ldr	r3, [r6, #0]
 8000b76:	b133      	cbz	r3, 8000b86 <__sfp+0x2e>
 8000b78:	6836      	ldr	r6, [r6, #0]
 8000b7a:	e7f7      	b.n	8000b6c <__sfp+0x14>
 8000b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000b80:	b16d      	cbz	r5, 8000b9e <__sfp+0x46>
 8000b82:	3468      	adds	r4, #104	; 0x68
 8000b84:	e7f4      	b.n	8000b70 <__sfp+0x18>
 8000b86:	2104      	movs	r1, #4
 8000b88:	4638      	mov	r0, r7
 8000b8a:	f7ff ff9f 	bl	8000acc <__sfmoreglue>
 8000b8e:	6030      	str	r0, [r6, #0]
 8000b90:	2800      	cmp	r0, #0
 8000b92:	d1f1      	bne.n	8000b78 <__sfp+0x20>
 8000b94:	230c      	movs	r3, #12
 8000b96:	4604      	mov	r4, r0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <__sfp+0x74>)
 8000ba0:	6665      	str	r5, [r4, #100]	; 0x64
 8000ba2:	e9c4 5500 	strd	r5, r5, [r4]
 8000ba6:	60a5      	str	r5, [r4, #8]
 8000ba8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000bac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	4629      	mov	r1, r5
 8000bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bb8:	f7ff fd82 	bl	80006c0 <memset>
 8000bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bc4:	e7e9      	b.n	8000b9a <__sfp+0x42>
 8000bc6:	bf00      	nop
 8000bc8:	08000fb8 	.word	0x08000fb8
 8000bcc:	ffff0001 	.word	0xffff0001

08000bd0 <_fwalk_reent>:
 8000bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd4:	4680      	mov	r8, r0
 8000bd6:	4689      	mov	r9, r1
 8000bd8:	2600      	movs	r6, #0
 8000bda:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000bde:	b914      	cbnz	r4, 8000be6 <_fwalk_reent+0x16>
 8000be0:	4630      	mov	r0, r6
 8000be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000be6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000bea:	3f01      	subs	r7, #1
 8000bec:	d501      	bpl.n	8000bf2 <_fwalk_reent+0x22>
 8000bee:	6824      	ldr	r4, [r4, #0]
 8000bf0:	e7f5      	b.n	8000bde <_fwalk_reent+0xe>
 8000bf2:	89ab      	ldrh	r3, [r5, #12]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d907      	bls.n	8000c08 <_fwalk_reent+0x38>
 8000bf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	d003      	beq.n	8000c08 <_fwalk_reent+0x38>
 8000c00:	4629      	mov	r1, r5
 8000c02:	4640      	mov	r0, r8
 8000c04:	47c8      	blx	r9
 8000c06:	4306      	orrs	r6, r0
 8000c08:	3568      	adds	r5, #104	; 0x68
 8000c0a:	e7ee      	b.n	8000bea <_fwalk_reent+0x1a>

08000c0c <__swhatbuf_r>:
 8000c0c:	b570      	push	{r4, r5, r6, lr}
 8000c0e:	460e      	mov	r6, r1
 8000c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c14:	b096      	sub	sp, #88	; 0x58
 8000c16:	2900      	cmp	r1, #0
 8000c18:	4614      	mov	r4, r2
 8000c1a:	461d      	mov	r5, r3
 8000c1c:	da07      	bge.n	8000c2e <__swhatbuf_r+0x22>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	602b      	str	r3, [r5, #0]
 8000c22:	89b3      	ldrh	r3, [r6, #12]
 8000c24:	061a      	lsls	r2, r3, #24
 8000c26:	d410      	bmi.n	8000c4a <__swhatbuf_r+0x3e>
 8000c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2c:	e00e      	b.n	8000c4c <__swhatbuf_r+0x40>
 8000c2e:	466a      	mov	r2, sp
 8000c30:	f000 f96c 	bl	8000f0c <_fstat_r>
 8000c34:	2800      	cmp	r0, #0
 8000c36:	dbf2      	blt.n	8000c1e <__swhatbuf_r+0x12>
 8000c38:	9a01      	ldr	r2, [sp, #4]
 8000c3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000c3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000c42:	425a      	negs	r2, r3
 8000c44:	415a      	adcs	r2, r3
 8000c46:	602a      	str	r2, [r5, #0]
 8000c48:	e7ee      	b.n	8000c28 <__swhatbuf_r+0x1c>
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	6023      	str	r3, [r4, #0]
 8000c50:	b016      	add	sp, #88	; 0x58
 8000c52:	bd70      	pop	{r4, r5, r6, pc}

08000c54 <__smakebuf_r>:
 8000c54:	898b      	ldrh	r3, [r1, #12]
 8000c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c58:	079d      	lsls	r5, r3, #30
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	d507      	bpl.n	8000c70 <__smakebuf_r+0x1c>
 8000c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	6123      	str	r3, [r4, #16]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	6163      	str	r3, [r4, #20]
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	ab01      	add	r3, sp, #4
 8000c72:	466a      	mov	r2, sp
 8000c74:	f7ff ffca 	bl	8000c0c <__swhatbuf_r>
 8000c78:	9900      	ldr	r1, [sp, #0]
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	f000 f875 	bl	8000d6c <_malloc_r>
 8000c82:	b948      	cbnz	r0, 8000c98 <__smakebuf_r+0x44>
 8000c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c88:	059a      	lsls	r2, r3, #22
 8000c8a:	d4ef      	bmi.n	8000c6c <__smakebuf_r+0x18>
 8000c8c:	f023 0303 	bic.w	r3, r3, #3
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	81a3      	strh	r3, [r4, #12]
 8000c96:	e7e3      	b.n	8000c60 <__smakebuf_r+0xc>
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <__smakebuf_r+0x7c>)
 8000c9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000c9c:	89a3      	ldrh	r3, [r4, #12]
 8000c9e:	6020      	str	r0, [r4, #0]
 8000ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca4:	81a3      	strh	r3, [r4, #12]
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	6120      	str	r0, [r4, #16]
 8000caa:	6163      	str	r3, [r4, #20]
 8000cac:	9b01      	ldr	r3, [sp, #4]
 8000cae:	b15b      	cbz	r3, 8000cc8 <__smakebuf_r+0x74>
 8000cb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cb4:	4630      	mov	r0, r6
 8000cb6:	f000 f93b 	bl	8000f30 <_isatty_r>
 8000cba:	b128      	cbz	r0, 8000cc8 <__smakebuf_r+0x74>
 8000cbc:	89a3      	ldrh	r3, [r4, #12]
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	f043 0301 	orr.w	r3, r3, #1
 8000cc6:	81a3      	strh	r3, [r4, #12]
 8000cc8:	89a3      	ldrh	r3, [r4, #12]
 8000cca:	431d      	orrs	r5, r3
 8000ccc:	81a5      	strh	r5, [r4, #12]
 8000cce:	e7cd      	b.n	8000c6c <__smakebuf_r+0x18>
 8000cd0:	08000ac1 	.word	0x08000ac1

08000cd4 <_free_r>:
 8000cd4:	b538      	push	{r3, r4, r5, lr}
 8000cd6:	4605      	mov	r5, r0
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d043      	beq.n	8000d64 <_free_r+0x90>
 8000cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ce0:	1f0c      	subs	r4, r1, #4
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	bfb8      	it	lt
 8000ce6:	18e4      	addlt	r4, r4, r3
 8000ce8:	f000 f944 	bl	8000f74 <__malloc_lock>
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <_free_r+0x94>)
 8000cee:	6813      	ldr	r3, [r2, #0]
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	b933      	cbnz	r3, 8000d02 <_free_r+0x2e>
 8000cf4:	6063      	str	r3, [r4, #4]
 8000cf6:	6014      	str	r4, [r2, #0]
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cfe:	f000 b93a 	b.w	8000f76 <__malloc_unlock>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d90b      	bls.n	8000d1e <_free_r+0x4a>
 8000d06:	6821      	ldr	r1, [r4, #0]
 8000d08:	1862      	adds	r2, r4, r1
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	bf01      	itttt	eq
 8000d0e:	681a      	ldreq	r2, [r3, #0]
 8000d10:	685b      	ldreq	r3, [r3, #4]
 8000d12:	1852      	addeq	r2, r2, r1
 8000d14:	6022      	streq	r2, [r4, #0]
 8000d16:	6063      	str	r3, [r4, #4]
 8000d18:	6004      	str	r4, [r0, #0]
 8000d1a:	e7ed      	b.n	8000cf8 <_free_r+0x24>
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	685a      	ldr	r2, [r3, #4]
 8000d20:	b10a      	cbz	r2, 8000d26 <_free_r+0x52>
 8000d22:	42a2      	cmp	r2, r4
 8000d24:	d9fa      	bls.n	8000d1c <_free_r+0x48>
 8000d26:	6819      	ldr	r1, [r3, #0]
 8000d28:	1858      	adds	r0, r3, r1
 8000d2a:	42a0      	cmp	r0, r4
 8000d2c:	d10b      	bne.n	8000d46 <_free_r+0x72>
 8000d2e:	6820      	ldr	r0, [r4, #0]
 8000d30:	4401      	add	r1, r0
 8000d32:	1858      	adds	r0, r3, r1
 8000d34:	4282      	cmp	r2, r0
 8000d36:	6019      	str	r1, [r3, #0]
 8000d38:	d1de      	bne.n	8000cf8 <_free_r+0x24>
 8000d3a:	6810      	ldr	r0, [r2, #0]
 8000d3c:	6852      	ldr	r2, [r2, #4]
 8000d3e:	4401      	add	r1, r0
 8000d40:	6019      	str	r1, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	e7d8      	b.n	8000cf8 <_free_r+0x24>
 8000d46:	d902      	bls.n	8000d4e <_free_r+0x7a>
 8000d48:	230c      	movs	r3, #12
 8000d4a:	602b      	str	r3, [r5, #0]
 8000d4c:	e7d4      	b.n	8000cf8 <_free_r+0x24>
 8000d4e:	6820      	ldr	r0, [r4, #0]
 8000d50:	1821      	adds	r1, r4, r0
 8000d52:	428a      	cmp	r2, r1
 8000d54:	bf01      	itttt	eq
 8000d56:	6811      	ldreq	r1, [r2, #0]
 8000d58:	6852      	ldreq	r2, [r2, #4]
 8000d5a:	1809      	addeq	r1, r1, r0
 8000d5c:	6021      	streq	r1, [r4, #0]
 8000d5e:	6062      	str	r2, [r4, #4]
 8000d60:	605c      	str	r4, [r3, #4]
 8000d62:	e7c9      	b.n	8000cf8 <_free_r+0x24>
 8000d64:	bd38      	pop	{r3, r4, r5, pc}
 8000d66:	bf00      	nop
 8000d68:	20000084 	.word	0x20000084

08000d6c <_malloc_r>:
 8000d6c:	b570      	push	{r4, r5, r6, lr}
 8000d6e:	1ccd      	adds	r5, r1, #3
 8000d70:	f025 0503 	bic.w	r5, r5, #3
 8000d74:	3508      	adds	r5, #8
 8000d76:	2d0c      	cmp	r5, #12
 8000d78:	bf38      	it	cc
 8000d7a:	250c      	movcc	r5, #12
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	4606      	mov	r6, r0
 8000d80:	db01      	blt.n	8000d86 <_malloc_r+0x1a>
 8000d82:	42a9      	cmp	r1, r5
 8000d84:	d903      	bls.n	8000d8e <_malloc_r+0x22>
 8000d86:	230c      	movs	r3, #12
 8000d88:	6033      	str	r3, [r6, #0]
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	bd70      	pop	{r4, r5, r6, pc}
 8000d8e:	f000 f8f1 	bl	8000f74 <__malloc_lock>
 8000d92:	4a21      	ldr	r2, [pc, #132]	; (8000e18 <_malloc_r+0xac>)
 8000d94:	6814      	ldr	r4, [r2, #0]
 8000d96:	4621      	mov	r1, r4
 8000d98:	b991      	cbnz	r1, 8000dc0 <_malloc_r+0x54>
 8000d9a:	4c20      	ldr	r4, [pc, #128]	; (8000e1c <_malloc_r+0xb0>)
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	b91b      	cbnz	r3, 8000da8 <_malloc_r+0x3c>
 8000da0:	4630      	mov	r0, r6
 8000da2:	f000 f83d 	bl	8000e20 <_sbrk_r>
 8000da6:	6020      	str	r0, [r4, #0]
 8000da8:	4629      	mov	r1, r5
 8000daa:	4630      	mov	r0, r6
 8000dac:	f000 f838 	bl	8000e20 <_sbrk_r>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d124      	bne.n	8000dfe <_malloc_r+0x92>
 8000db4:	230c      	movs	r3, #12
 8000db6:	4630      	mov	r0, r6
 8000db8:	6033      	str	r3, [r6, #0]
 8000dba:	f000 f8dc 	bl	8000f76 <__malloc_unlock>
 8000dbe:	e7e4      	b.n	8000d8a <_malloc_r+0x1e>
 8000dc0:	680b      	ldr	r3, [r1, #0]
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	d418      	bmi.n	8000df8 <_malloc_r+0x8c>
 8000dc6:	2b0b      	cmp	r3, #11
 8000dc8:	d90f      	bls.n	8000dea <_malloc_r+0x7e>
 8000dca:	600b      	str	r3, [r1, #0]
 8000dcc:	18cc      	adds	r4, r1, r3
 8000dce:	50cd      	str	r5, [r1, r3]
 8000dd0:	4630      	mov	r0, r6
 8000dd2:	f000 f8d0 	bl	8000f76 <__malloc_unlock>
 8000dd6:	f104 000b 	add.w	r0, r4, #11
 8000dda:	1d23      	adds	r3, r4, #4
 8000ddc:	f020 0007 	bic.w	r0, r0, #7
 8000de0:	1ac3      	subs	r3, r0, r3
 8000de2:	d0d3      	beq.n	8000d8c <_malloc_r+0x20>
 8000de4:	425a      	negs	r2, r3
 8000de6:	50e2      	str	r2, [r4, r3]
 8000de8:	e7d0      	b.n	8000d8c <_malloc_r+0x20>
 8000dea:	684b      	ldr	r3, [r1, #4]
 8000dec:	428c      	cmp	r4, r1
 8000dee:	bf16      	itet	ne
 8000df0:	6063      	strne	r3, [r4, #4]
 8000df2:	6013      	streq	r3, [r2, #0]
 8000df4:	460c      	movne	r4, r1
 8000df6:	e7eb      	b.n	8000dd0 <_malloc_r+0x64>
 8000df8:	460c      	mov	r4, r1
 8000dfa:	6849      	ldr	r1, [r1, #4]
 8000dfc:	e7cc      	b.n	8000d98 <_malloc_r+0x2c>
 8000dfe:	1cc4      	adds	r4, r0, #3
 8000e00:	f024 0403 	bic.w	r4, r4, #3
 8000e04:	42a0      	cmp	r0, r4
 8000e06:	d005      	beq.n	8000e14 <_malloc_r+0xa8>
 8000e08:	1a21      	subs	r1, r4, r0
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	f000 f808 	bl	8000e20 <_sbrk_r>
 8000e10:	3001      	adds	r0, #1
 8000e12:	d0cf      	beq.n	8000db4 <_malloc_r+0x48>
 8000e14:	6025      	str	r5, [r4, #0]
 8000e16:	e7db      	b.n	8000dd0 <_malloc_r+0x64>
 8000e18:	20000084 	.word	0x20000084
 8000e1c:	20000088 	.word	0x20000088

08000e20 <_sbrk_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	2300      	movs	r3, #0
 8000e24:	4c05      	ldr	r4, [pc, #20]	; (8000e3c <_sbrk_r+0x1c>)
 8000e26:	4605      	mov	r5, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	6023      	str	r3, [r4, #0]
 8000e2c:	f7ff fa24 	bl	8000278 <_sbrk>
 8000e30:	1c43      	adds	r3, r0, #1
 8000e32:	d102      	bne.n	8000e3a <_sbrk_r+0x1a>
 8000e34:	6823      	ldr	r3, [r4, #0]
 8000e36:	b103      	cbz	r3, 8000e3a <_sbrk_r+0x1a>
 8000e38:	602b      	str	r3, [r5, #0]
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	2000008c 	.word	0x2000008c

08000e40 <__sread>:
 8000e40:	b510      	push	{r4, lr}
 8000e42:	460c      	mov	r4, r1
 8000e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e48:	f000 f896 	bl	8000f78 <_read_r>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	bfab      	itete	ge
 8000e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000e52:	89a3      	ldrhlt	r3, [r4, #12]
 8000e54:	181b      	addge	r3, r3, r0
 8000e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000e5a:	bfac      	ite	ge
 8000e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000e5e:	81a3      	strhlt	r3, [r4, #12]
 8000e60:	bd10      	pop	{r4, pc}

08000e62 <__swrite>:
 8000e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e66:	461f      	mov	r7, r3
 8000e68:	898b      	ldrh	r3, [r1, #12]
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	460c      	mov	r4, r1
 8000e70:	4616      	mov	r6, r2
 8000e72:	d505      	bpl.n	8000e80 <__swrite+0x1e>
 8000e74:	2302      	movs	r3, #2
 8000e76:	2200      	movs	r2, #0
 8000e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e7c:	f000 f868 	bl	8000f50 <_lseek_r>
 8000e80:	89a3      	ldrh	r3, [r4, #12]
 8000e82:	4632      	mov	r2, r6
 8000e84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e88:	81a3      	strh	r3, [r4, #12]
 8000e8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e8e:	463b      	mov	r3, r7
 8000e90:	4628      	mov	r0, r5
 8000e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e96:	f000 b817 	b.w	8000ec8 <_write_r>

08000e9a <__sseek>:
 8000e9a:	b510      	push	{r4, lr}
 8000e9c:	460c      	mov	r4, r1
 8000e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ea2:	f000 f855 	bl	8000f50 <_lseek_r>
 8000ea6:	1c43      	adds	r3, r0, #1
 8000ea8:	89a3      	ldrh	r3, [r4, #12]
 8000eaa:	bf15      	itete	ne
 8000eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8000eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000eb6:	81a3      	strheq	r3, [r4, #12]
 8000eb8:	bf18      	it	ne
 8000eba:	81a3      	strhne	r3, [r4, #12]
 8000ebc:	bd10      	pop	{r4, pc}

08000ebe <__sclose>:
 8000ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec2:	f000 b813 	b.w	8000eec <_close_r>
	...

08000ec8 <_write_r>:
 8000ec8:	b538      	push	{r3, r4, r5, lr}
 8000eca:	4605      	mov	r5, r0
 8000ecc:	4608      	mov	r0, r1
 8000ece:	4611      	mov	r1, r2
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	4c05      	ldr	r4, [pc, #20]	; (8000ee8 <_write_r+0x20>)
 8000ed4:	6022      	str	r2, [r4, #0]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f7ff f981 	bl	80001de <_write>
 8000edc:	1c43      	adds	r3, r0, #1
 8000ede:	d102      	bne.n	8000ee6 <_write_r+0x1e>
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	b103      	cbz	r3, 8000ee6 <_write_r+0x1e>
 8000ee4:	602b      	str	r3, [r5, #0]
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	2000008c 	.word	0x2000008c

08000eec <_close_r>:
 8000eec:	b538      	push	{r3, r4, r5, lr}
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4c05      	ldr	r4, [pc, #20]	; (8000f08 <_close_r+0x1c>)
 8000ef2:	4605      	mov	r5, r0
 8000ef4:	4608      	mov	r0, r1
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	f7ff f98d 	bl	8000216 <_close>
 8000efc:	1c43      	adds	r3, r0, #1
 8000efe:	d102      	bne.n	8000f06 <_close_r+0x1a>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	b103      	cbz	r3, 8000f06 <_close_r+0x1a>
 8000f04:	602b      	str	r3, [r5, #0]
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
 8000f08:	2000008c 	.word	0x2000008c

08000f0c <_fstat_r>:
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	2300      	movs	r3, #0
 8000f10:	4c06      	ldr	r4, [pc, #24]	; (8000f2c <_fstat_r+0x20>)
 8000f12:	4605      	mov	r5, r0
 8000f14:	4608      	mov	r0, r1
 8000f16:	4611      	mov	r1, r2
 8000f18:	6023      	str	r3, [r4, #0]
 8000f1a:	f7ff f987 	bl	800022c <_fstat>
 8000f1e:	1c43      	adds	r3, r0, #1
 8000f20:	d102      	bne.n	8000f28 <_fstat_r+0x1c>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	b103      	cbz	r3, 8000f28 <_fstat_r+0x1c>
 8000f26:	602b      	str	r3, [r5, #0]
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000008c 	.word	0x2000008c

08000f30 <_isatty_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	2300      	movs	r3, #0
 8000f34:	4c05      	ldr	r4, [pc, #20]	; (8000f4c <_isatty_r+0x1c>)
 8000f36:	4605      	mov	r5, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	6023      	str	r3, [r4, #0]
 8000f3c:	f7ff f985 	bl	800024a <_isatty>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_isatty_r+0x1a>
 8000f44:	6823      	ldr	r3, [r4, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_isatty_r+0x1a>
 8000f48:	602b      	str	r3, [r5, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	2000008c 	.word	0x2000008c

08000f50 <_lseek_r>:
 8000f50:	b538      	push	{r3, r4, r5, lr}
 8000f52:	4605      	mov	r5, r0
 8000f54:	4608      	mov	r0, r1
 8000f56:	4611      	mov	r1, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4c05      	ldr	r4, [pc, #20]	; (8000f70 <_lseek_r+0x20>)
 8000f5c:	6022      	str	r2, [r4, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	f7ff f97d 	bl	800025e <_lseek>
 8000f64:	1c43      	adds	r3, r0, #1
 8000f66:	d102      	bne.n	8000f6e <_lseek_r+0x1e>
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	b103      	cbz	r3, 8000f6e <_lseek_r+0x1e>
 8000f6c:	602b      	str	r3, [r5, #0]
 8000f6e:	bd38      	pop	{r3, r4, r5, pc}
 8000f70:	2000008c 	.word	0x2000008c

08000f74 <__malloc_lock>:
 8000f74:	4770      	bx	lr

08000f76 <__malloc_unlock>:
 8000f76:	4770      	bx	lr

08000f78 <_read_r>:
 8000f78:	b538      	push	{r3, r4, r5, lr}
 8000f7a:	4605      	mov	r5, r0
 8000f7c:	4608      	mov	r0, r1
 8000f7e:	4611      	mov	r1, r2
 8000f80:	2200      	movs	r2, #0
 8000f82:	4c05      	ldr	r4, [pc, #20]	; (8000f98 <_read_r+0x20>)
 8000f84:	6022      	str	r2, [r4, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	f7ff f90c 	bl	80001a4 <_read>
 8000f8c:	1c43      	adds	r3, r0, #1
 8000f8e:	d102      	bne.n	8000f96 <_read_r+0x1e>
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	b103      	cbz	r3, 8000f96 <_read_r+0x1e>
 8000f94:	602b      	str	r3, [r5, #0]
 8000f96:	bd38      	pop	{r3, r4, r5, pc}
 8000f98:	2000008c 	.word	0x2000008c

08000f9c <_init>:
 8000f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f9e:	bf00      	nop
 8000fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fa2:	bc08      	pop	{r3}
 8000fa4:	469e      	mov	lr, r3
 8000fa6:	4770      	bx	lr

08000fa8 <_fini>:
 8000fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000faa:	bf00      	nop
 8000fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fae:	bc08      	pop	{r3}
 8000fb0:	469e      	mov	lr, r3
 8000fb2:	4770      	bx	lr
