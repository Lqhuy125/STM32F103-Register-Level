
1.Set_Up_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000041c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  4 .ARM          00000000  08000528  08000528  00010530  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000528  08000530  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000528  08000528  00010528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800052c  0800052c  0001052c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010530  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000530  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000530  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000e39  00000000  00000000  00010559  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000517  00000000  00000000  00011392  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  000118b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  000119c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000101a3  00000000  00000000  00011a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015ff  00000000  00000000  00021c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00054a0f  00000000  00000000  0002323a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00077c49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002d4  00000000  00000000  00077cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000510 	.word	0x08000510

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000510 	.word	0x08000510

0800014c <main>:
#include "gpio.h"

bool button_status = false;

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 8000150:	f000 f89e 	bl	8000290 <rcc_HSE_config>
  rcc_SysTick_config(72000); // T=1ms -> f=1/T=1KHz -> 72 000 000 / 72 000 = 1000
 8000154:	4809      	ldr	r0, [pc, #36]	; (800017c <main+0x30>)
 8000156:	f000 f92d 	bl	80003b4 <rcc_SysTick_config>
  gpio_LED_config();
 800015a:	f000 f817 	bl	800018c <gpio_LED_config>


  while(1){

//    gpio_LED_toggle(13);
    gpio_digitalWrite(13, 1);
 800015e:	2101      	movs	r1, #1
 8000160:	200d      	movs	r0, #13
 8000162:	f000 f83b 	bl	80001dc <gpio_digitalWrite>
    rcc_sDelay(1);
 8000166:	2001      	movs	r0, #1
 8000168:	f000 f96e 	bl	8000448 <rcc_sDelay>
    gpio_digitalWrite(13, 0);
 800016c:	2100      	movs	r1, #0
 800016e:	200d      	movs	r0, #13
 8000170:	f000 f834 	bl	80001dc <gpio_digitalWrite>
    rcc_sDelay(1);
 8000174:	2001      	movs	r0, #1
 8000176:	f000 f967 	bl	8000448 <rcc_sDelay>
    gpio_digitalWrite(13, 1);
 800017a:	e7f0      	b.n	800015e <main+0x12>
 800017c:	00011940 	.word	0x00011940

08000180 <SystemInit>:
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
 8000184:	bf00      	nop
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr

0800018c <gpio_LED_config>:

#define bit_band_base 0x42000000
#define byte_offset 0x4001100C
#define bit_number 13
#define bit_word_addr *(uint32_t *)(bit_band_base+(byte_offset*32)+(bit_number*4))
void gpio_LED_config(){
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
  //Enable port clock
  RCC->APB2ENR &= ~(RCC_APB2ENR_IOPCEN); //clear
 8000190:	4b10      	ldr	r3, [pc, #64]	; (80001d4 <gpio_LED_config+0x48>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a0f      	ldr	r2, [pc, #60]	; (80001d4 <gpio_LED_config+0x48>)
 8000196:	f023 0310 	bic.w	r3, r3, #16
 800019a:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR |= 1UL << 4; // set 1
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <gpio_LED_config+0x48>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	4a0c      	ldr	r2, [pc, #48]	; (80001d4 <gpio_LED_config+0x48>)
 80001a2:	f043 0310 	orr.w	r3, r3, #16
 80001a6:	6193      	str	r3, [r2, #24]
  //select mode
  GPIOC->CRH &= ~(3UL << 20); //PC13
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <gpio_LED_config+0x4c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a0a      	ldr	r2, [pc, #40]	; (80001d8 <gpio_LED_config+0x4c>)
 80001ae:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80001b2:	6053      	str	r3, [r2, #4]
  GPIOC->CRH |= (1UL << 21); // 10: Output mode, max speed 2 MHz.
 80001b4:	4b08      	ldr	r3, [pc, #32]	; (80001d8 <gpio_LED_config+0x4c>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a07      	ldr	r2, [pc, #28]	; (80001d8 <gpio_LED_config+0x4c>)
 80001ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001be:	6053      	str	r3, [r2, #4]
  //CNF pull up
  GPIOC->CRH &= ~(3UL << 22); //00: General purpose output push-pull
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <gpio_LED_config+0x4c>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a04      	ldr	r2, [pc, #16]	; (80001d8 <gpio_LED_config+0x4c>)
 80001c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80001ca:	6053      	str	r3, [r2, #4]
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr
 80001d4:	40021000 	.word	0x40021000
 80001d8:	40011000 	.word	0x40011000

080001dc <gpio_digitalWrite>:
void gpio_digitalWrite(uint8_t pin ,bool state){
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	460a      	mov	r2, r1
 80001e6:	71fb      	strb	r3, [r7, #7]
 80001e8:	4613      	mov	r3, r2
 80001ea:	71bb      	strb	r3, [r7, #6]
  bit_word_addr = state;
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <gpio_digitalWrite+0x20>)
 80001ee:	79bb      	ldrb	r3, [r7, #6]
 80001f0:	6013      	str	r3, [r2, #0]
//  }
//  else{
//    GPIOC->ODR &= ~(1UL << pin);
//  }

}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	422201b4 	.word	0x422201b4

08000200 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020e:	2b00      	cmp	r3, #0
 8000210:	db0c      	blt.n	800022c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	f003 021f 	and.w	r2, r3, #31
 8000218:	4907      	ldr	r1, [pc, #28]	; (8000238 <__NVIC_ClearPendingIRQ+0x38>)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	095b      	lsrs	r3, r3, #5
 8000220:	2001      	movs	r0, #1
 8000222:	fa00 f202 	lsl.w	r2, r0, r2
 8000226:	3360      	adds	r3, #96	; 0x60
 8000228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	e000e100 	.word	0xe000e100

0800023c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	6039      	str	r1, [r7, #0]
 8000246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024c:	2b00      	cmp	r3, #0
 800024e:	db0a      	blt.n	8000266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	683b      	ldr	r3, [r7, #0]
 8000252:	b2da      	uxtb	r2, r3
 8000254:	490c      	ldr	r1, [pc, #48]	; (8000288 <__NVIC_SetPriority+0x4c>)
 8000256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025a:	0112      	lsls	r2, r2, #4
 800025c:	b2d2      	uxtb	r2, r2
 800025e:	440b      	add	r3, r1
 8000260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000264:	e00a      	b.n	800027c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4908      	ldr	r1, [pc, #32]	; (800028c <__NVIC_SetPriority+0x50>)
 800026c:	79fb      	ldrb	r3, [r7, #7]
 800026e:	f003 030f 	and.w	r3, r3, #15
 8000272:	3b04      	subs	r3, #4
 8000274:	0112      	lsls	r2, r2, #4
 8000276:	b2d2      	uxtb	r2, r2
 8000278:	440b      	add	r3, r1
 800027a:	761a      	strb	r2, [r3, #24]
}
 800027c:	bf00      	nop
 800027e:	370c      	adds	r7, #12
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	e000e100 	.word	0xe000e100
 800028c:	e000ed00 	.word	0xe000ed00

08000290 <rcc_HSE_config>:

#include "rcc.h"

static __IO uint32_t msTicks = 0;

void rcc_HSE_config(){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

  /* PLLMUX = 9*/
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 8000294:	4b45      	ldr	r3, [pc, #276]	; (80003ac <rcc_HSE_config+0x11c>)
 8000296:	685b      	ldr	r3, [r3, #4]
 8000298:	4a44      	ldr	r2, [pc, #272]	; (80003ac <rcc_HSE_config+0x11c>)
 800029a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800029e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 80002a0:	4b42      	ldr	r3, [pc, #264]	; (80003ac <rcc_HSE_config+0x11c>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	4a41      	ldr	r2, [pc, #260]	; (80003ac <rcc_HSE_config+0x11c>)
 80002a6:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80002aa:	6053      	str	r3, [r2, #4]

  //USB prescalar
  RCC->CFGR &= ~(RCC_CFGR_USBPRE); // ~(1UL << 22) clear bit
 80002ac:	4b3f      	ldr	r3, [pc, #252]	; (80003ac <rcc_HSE_config+0x11c>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	4a3e      	ldr	r2, [pc, #248]	; (80003ac <rcc_HSE_config+0x11c>)
 80002b2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80002b6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 22);
 80002b8:	4b3c      	ldr	r3, [pc, #240]	; (80003ac <rcc_HSE_config+0x11c>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a3b      	ldr	r2, [pc, #236]	; (80003ac <rcc_HSE_config+0x11c>)
 80002be:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002c2:	6053      	str	r3, [r2, #4]

  //HSE config
  RCC->CR |= (1UL << 16);
 80002c4:	4b39      	ldr	r3, [pc, #228]	; (80003ac <rcc_HSE_config+0x11c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a38      	ldr	r2, [pc, #224]	; (80003ac <rcc_HSE_config+0x11c>)
 80002ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002ce:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_HSERDY) == 0);
 80002d0:	bf00      	nop
 80002d2:	4b36      	ldr	r3, [pc, #216]	; (80003ac <rcc_HSE_config+0x11c>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0f9      	beq.n	80002d2 <rcc_HSE_config+0x42>

  //HSE is PLL source
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 80002de:	4b33      	ldr	r3, [pc, #204]	; (80003ac <rcc_HSE_config+0x11c>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	4a32      	ldr	r2, [pc, #200]	; (80003ac <rcc_HSE_config+0x11c>)
 80002e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002e8:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 16);
 80002ea:	4b30      	ldr	r3, [pc, #192]	; (80003ac <rcc_HSE_config+0x11c>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4a2f      	ldr	r2, [pc, #188]	; (80003ac <rcc_HSE_config+0x11c>)
 80002f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f4:	6053      	str	r3, [r2, #4]

  //PLL enable and wait
  RCC->CR |= (1UL << 24);
 80002f6:	4b2d      	ldr	r3, [pc, #180]	; (80003ac <rcc_HSE_config+0x11c>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a2c      	ldr	r2, [pc, #176]	; (80003ac <rcc_HSE_config+0x11c>)
 80002fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000300:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 8000302:	bf00      	nop
 8000304:	4b29      	ldr	r3, [pc, #164]	; (80003ac <rcc_HSE_config+0x11c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f9      	beq.n	8000304 <rcc_HSE_config+0x74>

  //Chọn tốc độ phù hợp hệ thống
  FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 8000310:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <rcc_HSE_config+0x120>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <rcc_HSE_config+0x120>)
 8000316:	f023 0307 	bic.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (2UL << 0); //set
 800031c:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <rcc_HSE_config+0x120>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a23      	ldr	r2, [pc, #140]	; (80003b0 <rcc_HSE_config+0x120>)
 8000322:	f043 0302 	orr.w	r3, r3, #2
 8000326:	6013      	str	r3, [r2, #0]
  //Prefetch buffer enable
  FLASH->ACR |= (1UL << 4); //set
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <rcc_HSE_config+0x120>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a20      	ldr	r2, [pc, #128]	; (80003b0 <rcc_HSE_config+0x120>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6013      	str	r3, [r2, #0]

  /* select system clock switch
   * PLLCLK is source
   */
  RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 8000334:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <rcc_HSE_config+0x11c>)
 8000336:	685b      	ldr	r3, [r3, #4]
 8000338:	4a1c      	ldr	r2, [pc, #112]	; (80003ac <rcc_HSE_config+0x11c>)
 800033a:	f023 0303 	bic.w	r3, r3, #3
 800033e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (2UL << 0); //set
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <rcc_HSE_config+0x11c>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	4a19      	ldr	r2, [pc, #100]	; (80003ac <rcc_HSE_config+0x11c>)
 8000346:	f043 0302 	orr.w	r3, r3, #2
 800034a:	6053      	str	r3, [r2, #4]
  while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 800034c:	bf00      	nop
 800034e:	4b17      	ldr	r3, [pc, #92]	; (80003ac <rcc_HSE_config+0x11c>)
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	f003 0308 	and.w	r3, r3, #8
 8000356:	2b00      	cmp	r3, #0
 8000358:	d0f9      	beq.n	800034e <rcc_HSE_config+0xbe>
   /* Preipherals clock setup
    *
    *
    */
  //AHB prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 800035a:	4b14      	ldr	r3, [pc, #80]	; (80003ac <rcc_HSE_config+0x11c>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	4a13      	ldr	r2, [pc, #76]	; (80003ac <rcc_HSE_config+0x11c>)
 8000360:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000364:	6053      	str	r3, [r2, #4]
  //APB1 prescaler /2
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <rcc_HSE_config+0x11c>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <rcc_HSE_config+0x11c>)
 800036c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000370:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <rcc_HSE_config+0x11c>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <rcc_HSE_config+0x11c>)
 8000378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800037c:	6053      	str	r3, [r2, #4]
  //APB2 prescaler /1
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800037e:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <rcc_HSE_config+0x11c>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <rcc_HSE_config+0x11c>)
 8000384:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000388:	6053      	str	r3, [r2, #4]
  //ADC prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800038a:	4b08      	ldr	r3, [pc, #32]	; (80003ac <rcc_HSE_config+0x11c>)
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	4a07      	ldr	r2, [pc, #28]	; (80003ac <rcc_HSE_config+0x11c>)
 8000390:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000394:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8000396:	4b05      	ldr	r3, [pc, #20]	; (80003ac <rcc_HSE_config+0x11c>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	4a04      	ldr	r2, [pc, #16]	; (80003ac <rcc_HSE_config+0x11c>)
 800039c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003a0:	6053      	str	r3, [r2, #4]

}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40021000 	.word	0x40021000
 80003b0:	40022000 	.word	0x40022000

080003b4 <rcc_SysTick_config>:

void rcc_SysTick_config(uint32_t arr){
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  SysTick->CTRL = 0; //Reset Control register
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <rcc_SysTick_config+0x38>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = arr; //Set the Reload value
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <rcc_SysTick_config+0x38>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(SysTick_IRQn, 0); //Set priority SysTick interrupt (NVIC)
 80003c8:	2100      	movs	r1, #0
 80003ca:	f04f 30ff 	mov.w	r0, #4294967295
 80003ce:	f7ff ff35 	bl	800023c <__NVIC_SetPriority>
  SysTick->VAL = 0; //Reset Stick value to 0
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <rcc_SysTick_config+0x38>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
//  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
//  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //Enable SysTick Exceptions
//  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //Use CPU Clock
  SysTick->CTRL |= (7UL << 0); //Enable SysTick from control register
 80003d8:	4b04      	ldr	r3, [pc, #16]	; (80003ec <rcc_SysTick_config+0x38>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a03      	ldr	r2, [pc, #12]	; (80003ec <rcc_SysTick_config+0x38>)
 80003de:	f043 0307 	orr.w	r3, r3, #7
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	e000e010 	.word	0xe000e010

080003f0 <rcc_msIncTicks>:

void rcc_msIncTicks(void){
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  msTicks++;
 80003f4:	4b04      	ldr	r3, [pc, #16]	; (8000408 <rcc_msIncTicks+0x18>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	4a03      	ldr	r2, [pc, #12]	; (8000408 <rcc_msIncTicks+0x18>)
 80003fc:	6013      	str	r3, [r2, #0]
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	bc80      	pop	{r7}
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	2000001c 	.word	0x2000001c

0800040c <rcc_msGetTicks>:
uint32_t rcc_msGetTicks(void){
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  return msTicks;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <rcc_msGetTicks+0x10>)
 8000412:	681b      	ldr	r3, [r3, #0]
}
 8000414:	4618      	mov	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	2000001c 	.word	0x2000001c

08000420 <rcc_msDelay>:
void rcc_msDelay(uint32_t  ms){
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t startTicks = rcc_msGetTicks();
 8000428:	f7ff fff0 	bl	800040c <rcc_msGetTicks>
 800042c:	60f8      	str	r0, [r7, #12]
  while((rcc_msGetTicks() - startTicks) < ms);
 800042e:	bf00      	nop
 8000430:	f7ff ffec 	bl	800040c <rcc_msGetTicks>
 8000434:	4602      	mov	r2, r0
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	1ad3      	subs	r3, r2, r3
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	429a      	cmp	r2, r3
 800043e:	d8f7      	bhi.n	8000430 <rcc_msDelay+0x10>
}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <rcc_sDelay>:
void rcc_sDelay(uint32_t s){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  rcc_msDelay(s * 1000); // Chuyển đổi milliseconds thành microseconds
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000456:	fb02 f303 	mul.w	r3, r2, r3
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ffe0 	bl	8000420 <rcc_msDelay>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <SysTick_Handler>:
void SysTick_Handler(void){
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn); // Clear Flag
 800046c:	f04f 30ff 	mov.w	r0, #4294967295
 8000470:	f7ff fec6 	bl	8000200 <__NVIC_ClearPendingIRQ>
  rcc_msIncTicks();
 8000474:	f7ff ffbc 	bl	80003f0 <rcc_msIncTicks>
}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}

0800047c <Reset_Handler>:
 800047c:	f7ff fe80 	bl	8000180 <SystemInit>
 8000480:	480b      	ldr	r0, [pc, #44]	; (80004b0 <LoopFillZerobss+0xe>)
 8000482:	490c      	ldr	r1, [pc, #48]	; (80004b4 <LoopFillZerobss+0x12>)
 8000484:	4a0c      	ldr	r2, [pc, #48]	; (80004b8 <LoopFillZerobss+0x16>)
 8000486:	2300      	movs	r3, #0
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:
 800048a:	58d4      	ldr	r4, [r2, r3]
 800048c:	50c4      	str	r4, [r0, r3]
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:
 8000490:	18c4      	adds	r4, r0, r3
 8000492:	428c      	cmp	r4, r1
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <LoopFillZerobss+0x1a>)
 8000498:	4c09      	ldr	r4, [pc, #36]	; (80004c0 <LoopFillZerobss+0x1e>)
 800049a:	2300      	movs	r3, #0
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:
 800049e:	6013      	str	r3, [r2, #0]
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:
 80004a2:	42a2      	cmp	r2, r4
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>
 80004a6:	f000 f80f 	bl	80004c8 <__libc_init_array>
 80004aa:	f7ff fe4f 	bl	800014c <main>
 80004ae:	4770      	bx	lr
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000000 	.word	0x20000000
 80004b8:	08000530 	.word	0x08000530
 80004bc:	20000000 	.word	0x20000000
 80004c0:	20000020 	.word	0x20000020

080004c4 <ADC1_2_IRQHandler>:
 80004c4:	e7fe      	b.n	80004c4 <ADC1_2_IRQHandler>
	...

080004c8 <__libc_init_array>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	2500      	movs	r5, #0
 80004cc:	4e0c      	ldr	r6, [pc, #48]	; (8000500 <__libc_init_array+0x38>)
 80004ce:	4c0d      	ldr	r4, [pc, #52]	; (8000504 <__libc_init_array+0x3c>)
 80004d0:	1ba4      	subs	r4, r4, r6
 80004d2:	10a4      	asrs	r4, r4, #2
 80004d4:	42a5      	cmp	r5, r4
 80004d6:	d109      	bne.n	80004ec <__libc_init_array+0x24>
 80004d8:	f000 f81a 	bl	8000510 <_init>
 80004dc:	2500      	movs	r5, #0
 80004de:	4e0a      	ldr	r6, [pc, #40]	; (8000508 <__libc_init_array+0x40>)
 80004e0:	4c0a      	ldr	r4, [pc, #40]	; (800050c <__libc_init_array+0x44>)
 80004e2:	1ba4      	subs	r4, r4, r6
 80004e4:	10a4      	asrs	r4, r4, #2
 80004e6:	42a5      	cmp	r5, r4
 80004e8:	d105      	bne.n	80004f6 <__libc_init_array+0x2e>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004f0:	4798      	blx	r3
 80004f2:	3501      	adds	r5, #1
 80004f4:	e7ee      	b.n	80004d4 <__libc_init_array+0xc>
 80004f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004fa:	4798      	blx	r3
 80004fc:	3501      	adds	r5, #1
 80004fe:	e7f2      	b.n	80004e6 <__libc_init_array+0x1e>
 8000500:	08000528 	.word	0x08000528
 8000504:	08000528 	.word	0x08000528
 8000508:	08000528 	.word	0x08000528
 800050c:	0800052c 	.word	0x0800052c

08000510 <_init>:
 8000510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000512:	bf00      	nop
 8000514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000516:	bc08      	pop	{r3}
 8000518:	469e      	mov	lr, r3
 800051a:	4770      	bx	lr

0800051c <_fini>:
 800051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051e:	bf00      	nop
 8000520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000522:	bc08      	pop	{r3}
 8000524:	469e      	mov	lr, r3
 8000526:	4770      	bx	lr
