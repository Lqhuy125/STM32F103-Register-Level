
1.Set_Up_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080005cc  080005cc  000105cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d4  080005d4  000105dc  2**0
                  CONTENTS
  4 .ARM          00000000  080005d4  080005d4  000105dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005d4  080005dc  000105dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d4  080005d4  000105d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005d8  080005d8  000105d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005dc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005dc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000fb1  00000000  00000000  00010605  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000057f  00000000  00000000  000115b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000118  00000000  00000000  00011b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00011c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010197  00000000  00000000  00011d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000150a  00000000  00000000  00021eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000549a8  00000000  00000000  000233c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00077d69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002e4  00000000  00000000  00077de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080005b4 	.word	0x080005b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080005b4 	.word	0x080005b4

0800014c <main>:

void delay(int x){
  for(int i = 0; i < x; i++){}
}
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  rcc_HSE_config();
 8000150:	f000 f866 	bl	8000220 <rcc_HSE_config>
  rcc_SysTick_config(72000); // T=1ms -> f=1/T=1KHz -> 72 000 000 / 72 000 = 1000
 8000154:	4809      	ldr	r0, [pc, #36]	; (800017c <main+0x30>)
 8000156:	f000 f8f5 	bl	8000344 <rcc_SysTick_config>
//  gpio_LED_config();
//  gpio_BUTTON_config();
  setup();
 800015a:	f000 f997 	bl	800048c <setup>


  while(1){
    uart2_write_string("hello\t");
 800015e:	4808      	ldr	r0, [pc, #32]	; (8000180 <main+0x34>)
 8000160:	f000 f97e 	bl	8000460 <uart2_write_string>
    uart2_write('\r');
 8000164:	200d      	movs	r0, #13
 8000166:	f000 f965 	bl	8000434 <uart2_write>
    uart2_write('\n');
 800016a:	200a      	movs	r0, #10
 800016c:	f000 f962 	bl	8000434 <uart2_write>
    rcc_msDelay(1000);
 8000170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000174:	f000 f91c 	bl	80003b0 <rcc_msDelay>
    uart2_write_string("hello\t");
 8000178:	e7f1      	b.n	800015e <main+0x12>
 800017a:	bf00      	nop
 800017c:	00011940 	.word	0x00011940
 8000180:	080005cc 	.word	0x080005cc

08000184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000184:	b480      	push	{r7}
 8000186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000188:	bf00      	nop
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db0c      	blt.n	80001bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	f003 021f 	and.w	r2, r3, #31
 80001a8:	4907      	ldr	r1, [pc, #28]	; (80001c8 <__NVIC_ClearPendingIRQ+0x38>)
 80001aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ae:	095b      	lsrs	r3, r3, #5
 80001b0:	2001      	movs	r0, #1
 80001b2:	fa00 f202 	lsl.w	r2, r0, r2
 80001b6:	3360      	adds	r3, #96	; 0x60
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	e000e100 	.word	0xe000e100

080001cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001cc:	b480      	push	{r7}
 80001ce:	b083      	sub	sp, #12
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	6039      	str	r1, [r7, #0]
 80001d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	db0a      	blt.n	80001f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	490c      	ldr	r1, [pc, #48]	; (8000218 <__NVIC_SetPriority+0x4c>)
 80001e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ea:	0112      	lsls	r2, r2, #4
 80001ec:	b2d2      	uxtb	r2, r2
 80001ee:	440b      	add	r3, r1
 80001f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001f4:	e00a      	b.n	800020c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	b2da      	uxtb	r2, r3
 80001fa:	4908      	ldr	r1, [pc, #32]	; (800021c <__NVIC_SetPriority+0x50>)
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	f003 030f 	and.w	r3, r3, #15
 8000202:	3b04      	subs	r3, #4
 8000204:	0112      	lsls	r2, r2, #4
 8000206:	b2d2      	uxtb	r2, r2
 8000208:	440b      	add	r3, r1
 800020a:	761a      	strb	r2, [r3, #24]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	bc80      	pop	{r7}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	e000e100 	.word	0xe000e100
 800021c:	e000ed00 	.word	0xe000ed00

08000220 <rcc_HSE_config>:

#include "rcc.h"

static __IO uint32_t msTicks = 0;

void rcc_HSE_config(){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0

  /* PLLMUX = 9*/
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); //clear bit PLLMULL
 8000224:	4b45      	ldr	r3, [pc, #276]	; (800033c <rcc_HSE_config+0x11c>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4a44      	ldr	r2, [pc, #272]	; (800033c <rcc_HSE_config+0x11c>)
 800022a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800022e:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (7UL << 18); //0111 << 18  PLLMULL[21:18]
 8000230:	4b42      	ldr	r3, [pc, #264]	; (800033c <rcc_HSE_config+0x11c>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a41      	ldr	r2, [pc, #260]	; (800033c <rcc_HSE_config+0x11c>)
 8000236:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800023a:	6053      	str	r3, [r2, #4]

  //USB prescalar
  RCC->CFGR &= ~(RCC_CFGR_USBPRE); // ~(1UL << 22) clear bit
 800023c:	4b3f      	ldr	r3, [pc, #252]	; (800033c <rcc_HSE_config+0x11c>)
 800023e:	685b      	ldr	r3, [r3, #4]
 8000240:	4a3e      	ldr	r2, [pc, #248]	; (800033c <rcc_HSE_config+0x11c>)
 8000242:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000246:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 22);
 8000248:	4b3c      	ldr	r3, [pc, #240]	; (800033c <rcc_HSE_config+0x11c>)
 800024a:	685b      	ldr	r3, [r3, #4]
 800024c:	4a3b      	ldr	r2, [pc, #236]	; (800033c <rcc_HSE_config+0x11c>)
 800024e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000252:	6053      	str	r3, [r2, #4]

  //HSE config
  RCC->CR |= (1UL << 16);
 8000254:	4b39      	ldr	r3, [pc, #228]	; (800033c <rcc_HSE_config+0x11c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a38      	ldr	r2, [pc, #224]	; (800033c <rcc_HSE_config+0x11c>)
 800025a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800025e:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_HSERDY) == 0);
 8000260:	bf00      	nop
 8000262:	4b36      	ldr	r3, [pc, #216]	; (800033c <rcc_HSE_config+0x11c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <rcc_HSE_config+0x42>

  //HSE is PLL source
  RCC->CFGR &= ~(RCC_CFGR_PLLSRC);
 800026e:	4b33      	ldr	r3, [pc, #204]	; (800033c <rcc_HSE_config+0x11c>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	4a32      	ldr	r2, [pc, #200]	; (800033c <rcc_HSE_config+0x11c>)
 8000274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000278:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (1UL << 16);
 800027a:	4b30      	ldr	r3, [pc, #192]	; (800033c <rcc_HSE_config+0x11c>)
 800027c:	685b      	ldr	r3, [r3, #4]
 800027e:	4a2f      	ldr	r2, [pc, #188]	; (800033c <rcc_HSE_config+0x11c>)
 8000280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000284:	6053      	str	r3, [r2, #4]

  //PLL enable and wait
  RCC->CR |= (1UL << 24);
 8000286:	4b2d      	ldr	r3, [pc, #180]	; (800033c <rcc_HSE_config+0x11c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a2c      	ldr	r2, [pc, #176]	; (800033c <rcc_HSE_config+0x11c>)
 800028c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000290:	6013      	str	r3, [r2, #0]
  while( (RCC->CR & RCC_CR_PLLRDY) == 0);
 8000292:	bf00      	nop
 8000294:	4b29      	ldr	r3, [pc, #164]	; (800033c <rcc_HSE_config+0x11c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <rcc_HSE_config+0x74>

  //Chọn tốc độ phù hợp hệ thống
  FLASH->ACR &= ~(FLASH_ACR_LATENCY); //clear
 80002a0:	4b27      	ldr	r3, [pc, #156]	; (8000340 <rcc_HSE_config+0x120>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a26      	ldr	r2, [pc, #152]	; (8000340 <rcc_HSE_config+0x120>)
 80002a6:	f023 0307 	bic.w	r3, r3, #7
 80002aa:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (2UL << 0); //set
 80002ac:	4b24      	ldr	r3, [pc, #144]	; (8000340 <rcc_HSE_config+0x120>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a23      	ldr	r2, [pc, #140]	; (8000340 <rcc_HSE_config+0x120>)
 80002b2:	f043 0302 	orr.w	r3, r3, #2
 80002b6:	6013      	str	r3, [r2, #0]
  //Prefetch buffer enable
  FLASH->ACR |= (1UL << 4); //set
 80002b8:	4b21      	ldr	r3, [pc, #132]	; (8000340 <rcc_HSE_config+0x120>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a20      	ldr	r2, [pc, #128]	; (8000340 <rcc_HSE_config+0x120>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]

  //select system clock switch
  RCC->CFGR &= ~(RCC_CFGR_SW); //clear
 80002c4:	4b1d      	ldr	r3, [pc, #116]	; (800033c <rcc_HSE_config+0x11c>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	4a1c      	ldr	r2, [pc, #112]	; (800033c <rcc_HSE_config+0x11c>)
 80002ca:	f023 0303 	bic.w	r3, r3, #3
 80002ce:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (2UL << 0); //set
 80002d0:	4b1a      	ldr	r3, [pc, #104]	; (800033c <rcc_HSE_config+0x11c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <rcc_HSE_config+0x11c>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6053      	str	r3, [r2, #4]
  while( (RCC->CFGR & RCC_CFGR_SWS_PLL) == 0); //wait
 80002dc:	bf00      	nop
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <rcc_HSE_config+0x11c>)
 80002e0:	685b      	ldr	r3, [r3, #4]
 80002e2:	f003 0308 	and.w	r3, r3, #8
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d0f9      	beq.n	80002de <rcc_HSE_config+0xbe>

  //Preipherals clock setup
  //AHB prescaler
  RCC->CFGR &= ~(RCC_CFGR_HPRE); // clear and 0xxx: SYSCLK not divided
 80002ea:	4b14      	ldr	r3, [pc, #80]	; (800033c <rcc_HSE_config+0x11c>)
 80002ec:	685b      	ldr	r3, [r3, #4]
 80002ee:	4a13      	ldr	r2, [pc, #76]	; (800033c <rcc_HSE_config+0x11c>)
 80002f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002f4:	6053      	str	r3, [r2, #4]
  //APB1 prescaler /2
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80002f6:	4b11      	ldr	r3, [pc, #68]	; (800033c <rcc_HSE_config+0x11c>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	4a10      	ldr	r2, [pc, #64]	; (800033c <rcc_HSE_config+0x11c>)
 80002fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000300:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <rcc_HSE_config+0x11c>)
 8000304:	685b      	ldr	r3, [r3, #4]
 8000306:	4a0d      	ldr	r2, [pc, #52]	; (800033c <rcc_HSE_config+0x11c>)
 8000308:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800030c:	6053      	str	r3, [r2, #4]
  //APB2 prescaler /1
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <rcc_HSE_config+0x11c>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <rcc_HSE_config+0x11c>)
 8000314:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000318:	6053      	str	r3, [r2, #4]
  //ADC prescaler
  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <rcc_HSE_config+0x11c>)
 800031c:	685b      	ldr	r3, [r3, #4]
 800031e:	4a07      	ldr	r2, [pc, #28]	; (800033c <rcc_HSE_config+0x11c>)
 8000320:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000324:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= RCC_CFGR_ADCPRE_DIV6;
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <rcc_HSE_config+0x11c>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <rcc_HSE_config+0x11c>)
 800032c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000330:	6053      	str	r3, [r2, #4]

}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40022000 	.word	0x40022000

08000344 <rcc_SysTick_config>:

void rcc_SysTick_config(uint32_t arr){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  SysTick->CTRL = 0; //Reset Control register
 800034c:	4b0b      	ldr	r3, [pc, #44]	; (800037c <rcc_SysTick_config+0x38>)
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = arr; //Set the Reload value
 8000352:	4a0a      	ldr	r2, [pc, #40]	; (800037c <rcc_SysTick_config+0x38>)
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(SysTick_IRQn, 0); //Set priority SysTick interrupt (NVIC)
 8000358:	2100      	movs	r1, #0
 800035a:	f04f 30ff 	mov.w	r0, #4294967295
 800035e:	f7ff ff35 	bl	80001cc <__NVIC_SetPriority>
  SysTick->VAL = 0; //Reset Stick value to 0
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <rcc_SysTick_config+0x38>)
 8000364:	2200      	movs	r2, #0
 8000366:	609a      	str	r2, [r3, #8]
//  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk; // Enable SysTick
//  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk; //Enable SysTick Exceptions
//  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk; //Use CPU Clock
  SysTick->CTRL |= (7UL << 0); //Enable SysTick from control register
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <rcc_SysTick_config+0x38>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a03      	ldr	r2, [pc, #12]	; (800037c <rcc_SysTick_config+0x38>)
 800036e:	f043 0307 	orr.w	r3, r3, #7
 8000372:	6013      	str	r3, [r2, #0]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	e000e010 	.word	0xe000e010

08000380 <rcc_msIncTicks>:

void rcc_msIncTicks(void){
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  msTicks++;
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <rcc_msIncTicks+0x18>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	3301      	adds	r3, #1
 800038a:	4a03      	ldr	r2, [pc, #12]	; (8000398 <rcc_msIncTicks+0x18>)
 800038c:	6013      	str	r3, [r2, #0]
}
 800038e:	bf00      	nop
 8000390:	46bd      	mov	sp, r7
 8000392:	bc80      	pop	{r7}
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	2000001c 	.word	0x2000001c

0800039c <rcc_msGetTicks>:
uint32_t rcc_msGetTicks(void){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  return msTicks;
 80003a0:	4b02      	ldr	r3, [pc, #8]	; (80003ac <rcc_msGetTicks+0x10>)
 80003a2:	681b      	ldr	r3, [r3, #0]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	2000001c 	.word	0x2000001c

080003b0 <rcc_msDelay>:
void rcc_msDelay(uint32_t  ms){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b084      	sub	sp, #16
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  uint32_t startTicks = rcc_msGetTicks();
 80003b8:	f7ff fff0 	bl	800039c <rcc_msGetTicks>
 80003bc:	60f8      	str	r0, [r7, #12]
  while((rcc_msGetTicks() - startTicks) < ms);
 80003be:	bf00      	nop
 80003c0:	f7ff ffec 	bl	800039c <rcc_msGetTicks>
 80003c4:	4602      	mov	r2, r0
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	1ad3      	subs	r3, r2, r3
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	429a      	cmp	r2, r3
 80003ce:	d8f7      	bhi.n	80003c0 <rcc_msDelay+0x10>
}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <SysTick_Handler>:
void SysTick_Handler(void){
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn); // Clear Flag
 80003dc:	f04f 30ff 	mov.w	r0, #4294967295
 80003e0:	f7ff fed6 	bl	8000190 <__NVIC_ClearPendingIRQ>
  rcc_msIncTicks();
 80003e4:	f7ff ffcc 	bl	8000380 <rcc_msIncTicks>
}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}

080003ec <compute_uart_bd>:
#define Baudrate  115200



static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
  return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	085a      	lsrs	r2, r3, #1
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	441a      	add	r2, r3
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	fbb2 f3f3 	udiv	r3, r2, r3
 8000404:	b29b      	uxth	r3, r3
}
 8000406:	4618      	mov	r0, r3
 8000408:	370c      	adds	r7, #12
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <uart_set_baudrate>:


static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  USARTx->BRR =  compute_uart_bd(PeriphClk,BaudRate);
 800041c:	6879      	ldr	r1, [r7, #4]
 800041e:	68b8      	ldr	r0, [r7, #8]
 8000420:	f7ff ffe4 	bl	80003ec <compute_uart_bd>
 8000424:	4603      	mov	r3, r0
 8000426:	461a      	mov	r2, r3
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	609a      	str	r2, [r3, #8]
}
 800042c:	bf00      	nop
 800042e:	3710      	adds	r7, #16
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <uart2_write>:

void uart2_write(char ch)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  /*Make sure the transmit data register is empty*/
  while(!(USART2->SR & USART_SR_TXE)){}
 800043e:	bf00      	nop
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <uart2_write+0x28>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000448:	2b00      	cmp	r3, #0
 800044a:	d0f9      	beq.n	8000440 <uart2_write+0xc>

  /*Write to transmit data register*/
  USART2->DR  =  (ch & 0xFF);
 800044c:	4a03      	ldr	r2, [pc, #12]	; (800045c <uart2_write+0x28>)
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	6053      	str	r3, [r2, #4]
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40004400 	.word	0x40004400

08000460 <uart2_write_string>:

void uart2_write_string(char *str){
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  while(*str != '\0'){
 8000468:	e007      	b.n	800047a <uart2_write_string+0x1a>
    uart2_write(*str);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f7ff ffe0 	bl	8000434 <uart2_write>
    str++;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3301      	adds	r3, #1
 8000478:	607b      	str	r3, [r7, #4]
  while(*str != '\0'){
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1f3      	bne.n	800046a <uart2_write_string+0xa>
  }
}
 8000482:	bf00      	nop
 8000484:	3708      	adds	r7, #8
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <setup>:
    // Reverse the string
    while (i > 0) {
        uart2_write(buffer[--i]);
    }
}
void setup(){
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  //enable clock access to GPIOA
    RCC->APB2ENR|=RCC_APB2ENR_IOPAEN;
 8000490:	4b1e      	ldr	r3, [pc, #120]	; (800050c <setup+0x80>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a1d      	ldr	r2, [pc, #116]	; (800050c <setup+0x80>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
    //Enable clock access to alternate function
    RCC->APB2ENR|=RCC_APB2ENR_AFIOEN;
 800049c:	4b1b      	ldr	r3, [pc, #108]	; (800050c <setup+0x80>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a1a      	ldr	r2, [pc, #104]	; (800050c <setup+0x80>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6193      	str	r3, [r2, #24]

    /*Confgiure PA2 as output maximum speed to 50MHz
     * and alternate output push-pull mode*/
    GPIOA->CRL|=GPIO_CRL_MODE2;
 80004a8:	4b19      	ldr	r3, [pc, #100]	; (8000510 <setup+0x84>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a18      	ldr	r2, [pc, #96]	; (8000510 <setup+0x84>)
 80004ae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004b2:	6013      	str	r3, [r2, #0]

    GPIOA->CRL|=GPIO_CRL_CNF2_1;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <setup+0x84>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a15      	ldr	r2, [pc, #84]	; (8000510 <setup+0x84>)
 80004ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004be:	6013      	str	r3, [r2, #0]
    GPIOA->CRL&=~GPIO_CRL_CNF2_0;
 80004c0:	4b13      	ldr	r3, [pc, #76]	; (8000510 <setup+0x84>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a12      	ldr	r2, [pc, #72]	; (8000510 <setup+0x84>)
 80004c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004ca:	6013      	str	r3, [r2, #0]


    /*Don't remap the pins*/
    AFIO->MAPR&=~AFIO_MAPR_USART2_REMAP;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <setup+0x88>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <setup+0x88>)
 80004d2:	f023 0308 	bic.w	r3, r3, #8
 80004d6:	6053      	str	r3, [r2, #4]

    /*USART2 configuration*/

    //enable clock access to USART2

    RCC->APB1ENR|=RCC_APB1ENR_USART2EN;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <setup+0x80>)
 80004da:	69db      	ldr	r3, [r3, #28]
 80004dc:	4a0b      	ldr	r2, [pc, #44]	; (800050c <setup+0x80>)
 80004de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e2:	61d3      	str	r3, [r2, #28]
  //  RCC->CFGR |= RCC_CFGR_PPRE1_DIV16;  // Assuming APB1 prescaler is 16

    //Transmit Enable
    USART2->CR1 |= USART_CR1_TE;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <setup+0x8c>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <setup+0x8c>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	60d3      	str	r3, [r2, #12]

    /*Set baudrate */
    uart_set_baudrate(USART2,Perpher_CLK,Baudrate);
 80004f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004f4:	4909      	ldr	r1, [pc, #36]	; (800051c <setup+0x90>)
 80004f6:	4808      	ldr	r0, [pc, #32]	; (8000518 <setup+0x8c>)
 80004f8:	f7ff ff8a 	bl	8000410 <uart_set_baudrate>
    //Enable UART
    USART2->CR1 |= USART_CR1_UE;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <setup+0x8c>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	4a05      	ldr	r2, [pc, #20]	; (8000518 <setup+0x8c>)
 8000502:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000506:	60d3      	str	r3, [r2, #12]
}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	40010800 	.word	0x40010800
 8000514:	40010000 	.word	0x40010000
 8000518:	40004400 	.word	0x40004400
 800051c:	02255100 	.word	0x02255100

08000520 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000520:	f7ff fe30 	bl	8000184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000524:	480b      	ldr	r0, [pc, #44]	; (8000554 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000526:	490c      	ldr	r1, [pc, #48]	; (8000558 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000528:	4a0c      	ldr	r2, [pc, #48]	; (800055c <LoopFillZerobss+0x16>)
  movs r3, #0
 800052a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800052c:	e002      	b.n	8000534 <LoopCopyDataInit>

0800052e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000532:	3304      	adds	r3, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000538:	d3f9      	bcc.n	800052e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053a:	4a09      	ldr	r2, [pc, #36]	; (8000560 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800053c:	4c09      	ldr	r4, [pc, #36]	; (8000564 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000540:	e001      	b.n	8000546 <LoopFillZerobss>

08000542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000544:	3204      	adds	r2, #4

08000546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000548:	d3fb      	bcc.n	8000542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054a:	f000 f80f 	bl	800056c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fdfd 	bl	800014c <main>
  bx lr
 8000552:	4770      	bx	lr
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800055c:	080005dc 	.word	0x080005dc
  ldr r2, =_sbss
 8000560:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000564:	20000020 	.word	0x20000020

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <__libc_init_array>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2500      	movs	r5, #0
 8000570:	4e0c      	ldr	r6, [pc, #48]	; (80005a4 <__libc_init_array+0x38>)
 8000572:	4c0d      	ldr	r4, [pc, #52]	; (80005a8 <__libc_init_array+0x3c>)
 8000574:	1ba4      	subs	r4, r4, r6
 8000576:	10a4      	asrs	r4, r4, #2
 8000578:	42a5      	cmp	r5, r4
 800057a:	d109      	bne.n	8000590 <__libc_init_array+0x24>
 800057c:	f000 f81a 	bl	80005b4 <_init>
 8000580:	2500      	movs	r5, #0
 8000582:	4e0a      	ldr	r6, [pc, #40]	; (80005ac <__libc_init_array+0x40>)
 8000584:	4c0a      	ldr	r4, [pc, #40]	; (80005b0 <__libc_init_array+0x44>)
 8000586:	1ba4      	subs	r4, r4, r6
 8000588:	10a4      	asrs	r4, r4, #2
 800058a:	42a5      	cmp	r5, r4
 800058c:	d105      	bne.n	800059a <__libc_init_array+0x2e>
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000594:	4798      	blx	r3
 8000596:	3501      	adds	r5, #1
 8000598:	e7ee      	b.n	8000578 <__libc_init_array+0xc>
 800059a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800059e:	4798      	blx	r3
 80005a0:	3501      	adds	r5, #1
 80005a2:	e7f2      	b.n	800058a <__libc_init_array+0x1e>
 80005a4:	080005d4 	.word	0x080005d4
 80005a8:	080005d4 	.word	0x080005d4
 80005ac:	080005d4 	.word	0x080005d4
 80005b0:	080005d8 	.word	0x080005d8

080005b4 <_init>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr

080005c0 <_fini>:
 80005c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c2:	bf00      	nop
 80005c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005c6:	bc08      	pop	{r3}
 80005c8:	469e      	mov	lr, r3
 80005ca:	4770      	bx	lr
